local sys_class_xdsl_ = {
  objectType = {
    name = "sys.class.xdsl.@.",
    access = "readOnly",
    numEntriesParameter = "InterfaceNumberOfEntries",
    minEntries = 1,
    maxEntries = 2,
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
      },
      VPI = {
        access = "readWrite",
        type = "string",
      },
      VCI = {
        access = "readWrite",
        type = "string",
      },
      Status = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Up",
          "Initializing",
          "EstablishingLink",
          "NoSignal",
          "Error",
          "Disabled",
          "Unknown"
        },
      },
      ModulationType = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "ADSL_G.dmt",
          "ADSL_G.lite",
          "ADSL_G.dmt.bis",
          "ADSL_re-adsl",
          "ADSL_2plus",
          "ADLS_four",
          "ADSL_ANSI_T1.413",
          "G.shdsl",
          "IDSL",
          "HDSL",
          "SDSL",
          "VDSL",
        },
      },
      BondingSupport = {
        access = "readWrite",
        type = "boolean",
      },
      UpstreamCurrRate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamCurrRate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamMaxRate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamMaxRate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      ShowtimeStart = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamNoiseMargin = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      DownstreamNoiseMargin = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      UpstreamAttenuation = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      DownstreamAttenuation = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      UpstreamPower = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      DownstreamDelay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      DownstreamPower = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      BytesSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      BytesReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      BitLoading = {
       access = "readOnly",
        activeNotify = "canDeny",
        type = "string",
      },
      UpstreamFECTotal = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamFECTotal = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamCRCTotal = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamCRCTotal = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamESTotal = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamESTotal = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamSESTotal = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamSESTotal = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamUASTotal = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamUASTotal = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOSTotal = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOSTotal = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOFTotal = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOFTotal = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOMTotal  = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOMTotal  = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamFECCurrentQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamFECCurrentQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamCRCCurrentQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamCRCCurrentQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamESCurrentQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamESCurrentQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamSESCurrentQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamSESCurrentQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamUASCurrentQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamUASCurrentQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOSCurrentQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOSCurrentQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOFCurrentQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOFCurrentQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOMCurrentQuarter  = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOMCurrentQuarter  = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamFECPreviousQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamFECPreviousQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamCRCPreviousQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamCRCPreviousQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamESPreviousQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamESPreviousQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamSESPreviousQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamSESPreviousQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamUASPreviousQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamUASPreviousQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOSPreviousQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOSPreviousQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOFPreviousQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOFPreviousQuarter = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOMPreviousQuarter  = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOMPreviousQuarter  = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamFECCurrentDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamFECCurrentDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamCRCCurrentDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamCRCCurrentDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamESCurrentDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamESCurrentDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamSESCurrentDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamSESCurrentDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamUASCurrentDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamUASCurrentDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOSCurrentDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOSCurrentDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOFCurrentDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOFCurrentDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOMCurrentDay  = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOMCurrentDay  = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamFECPreviousDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamFECPreviousDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamCRCPreviousDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamCRCPreviousDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamESPreviousDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamESPreviousDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamSESPreviousDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamSESPreviousDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamUASPreviousDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamUASPreviousDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOSPreviousDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOSPreviousDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOFPreviousDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOFPreviousDay = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOMPreviousDay  = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOMPreviousDay  = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamFECSinceSync = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamFECSinceSync = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamCRCSinceSync = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamCRCSinceSync = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamESSinceSync = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamESSinceSync = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamSESSinceSync = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamSESSinceSync = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamUASSinceSync = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamUASSinceSync = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOSSinceSync = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOSSinceSync = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOFSinceSync = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOFSinceSync = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamLOMSinceSync  = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamLOMSinceSync  = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
    }
  }
}

local xdslctl = require('transformer.shared.xdslctl')

-- Translate mode to ModulationType
local modemapping={
  ["G.DMT"]="ADSL_G.dmt",
  ["T1.413"]="ADSL_ANSI_T1.413",
  ["G.lite"]="ADSL_G.lite",
  ["AnnexI"]="ADSL_G.dmt.bis",
  ["ADSL2"]="ADSL_G.dmt.bis",
  ["ADSL2+"]="ADSL_2plus",
  ["RE-ADSL2"]="ADSL_re-adsl",
  ["VDSL2"]="VDSL",
  ["Unknown"]="",
}

-- function to convert the mode coming from xdslctl to ModulationType
local function convertMode(input)
  if input~=nil then
    local mainmode = string.match(input,"^(%S+)")
    return modemapping[mainmode]
  end
  return ""
end

-- function to get mode from xdslctl + convert to ModulationType
local function getMode(key)
  local mode=xdslctl.infoValue("mode", nil, nil, key)
  return convertMode(mode)
end

-- Create connection to ubus
local conn = mapper("ubus").connect()

-- Get xdsl status through ubus
local function get_ubus_xdsl_status()
  local result = conn:call("xdsl", "status", {})
  if result == nil then
    return 9
  end
  return result
end

-- Maps xdsl status to IGD Status
local statusmap = {
    [0] = "NoSignal",
    [1] = "Initializing",
    [2] = "Initializing",
    [3] = "Initializing",
    [4] = "EstablishingLink",
    [5] = "Up",
    [6] = "Initializing",
    [7] = "Initializing",
    [8] = "EstablishingLink",
    [9] = "Unknown"
}


-- Get the xdsl status
local function getStatus()
  local status = get_ubus_xdsl_status()
  if statusmap[status.statuscode] then
    return statusmap[status.statuscode]
  end
  return statusmap[9]
end

local common = mapper("nwcommon")
local uci_helper = mapper("ucihelper")
local getIntfInfo = common.getIntfInfo

--Get the key of the xdsl interface
local function getIntf()
  local key = {}
  local network_binding = { sectionname = "interface", config = "network", option = "", default = "" }
  local atm_binding = { sectionname ="atmdevice", config = "xtm", option = "path", default ="" }
  local ptm_binding = { sectionname ="ptmdevice", config = "xtm", option = "path", default ="" }
  local vlan_binding = {config="network", sectionname="device"}
  local ifnames = {}
  local vlanDevices = {}
  local bcmvopiDevices = {}

  uci_helper.foreach_on_uci(vlan_binding, function(s)
      if s["name"] and s["ifname"] then
          vlanDevices[s["name"]]=s["ifname"]
      end
  end)

  vlan_binding.sectionname = "bcmvopi"
  uci_helper.foreach_on_uci(vlan_binding, function(s)
      if s["if"] then
          bcmvopiDevices[s[".name"]]=s["if"]
      end
  end)

  uci_helper.foreach_on_uci(network_binding, function(s)
    ---
    -- interfaces can have the following format
    -- intf1 intf2 ... -> bridge
    -- intf.vlan -> remove vlan
    -- @interface -> alias (ignore it's already somewhere else)
    local ifname = s['device'] or ''
    for i in string.gmatch(ifname, "%S+") do -- split space separated
      if bcmvopiDevices[i] then
          ifnames[bcmvopiDevices[i]] = s[".name"]
      elseif vlanDevices[i] then
          ifnames[vlanDevices[i]] = s[".name"]
      else
          local j = string.match(i, "^[^%.@]+")
          if j then
              ifnames[j] = s[".name"]
          end
      end
    end
  end)

  uci_helper.foreach_on_uci(atm_binding,function(se)
    if ifnames[se['.name']] then
      key[#key + 1] = se['.name']
    end
  end)
  uci_helper.foreach_on_uci(ptm_binding,function(se)
    if ifnames[se['.name']] then
      key[#key + 1] = se['.name']
    end
  end)
  -- Store key to avoid uci lookup next time this function is called
  -- TODO caching is disabled for now since this needs transformer to restart after config changes
  --getIntf = function() return key end
  return key
end

--Get the statistic with specified name for the xdsl interface
local function getStats(name)
  local key = getIntf()
  local result = 0
  for i = 1,#key do
    result = result + tonumber(getIntfInfo(key[i], name))
  end
  return tostring(result)
end

local uci_binding = { config = "xdsl", sectionname = "dsl0", option = "enabled" }
local uci_binding_bonding_support = { config = "xdsl", sectionname = "dsl0", option = "bondingsupport", default="0" }
local uci_binding_vpi = { config = "xtm", sectionname = "atm_Internet", option = "vpi" }
local uci_binding_vci = { config = "xtm", sectionname = "atm_Internet", option = "vci" }

sys_class_xdsl_.get = {
  Enable = function(mapping, param, key)
    local enable = uci_helper.get_from_uci(uci_binding)
    return enable
  end,
  VPI = function(mapping, param, key)
    local vpi = uci_helper.get_from_uci(uci_binding_vpi)
    return vpi
  end,  
  VCI = function(mapping, param, key)
    local vci = uci_helper.get_from_uci(uci_binding_vci)
    return vci
  end, 
  Status = function(mapping, param, key)
    local status = xdslctl.infoValue("status", nil, nil, key)
    local returnvalue
    if status ~= nil then
      assert(io.open('/tmp/yuri.txt', 'a+')):write(string.format("%s %s %s %s\r\n", "getStatus requested for line", key, "status =", status))
      if status == "Showtime" then
        returnvalue = "Up"
      elseif status == "Idle" then
        returnvalue = "NoSignal"
      else
        returnvalue = "Initializing"
      end
    else
      returnvalue = "Initializing"
    end
    return returnvalue
    ---return getStatus()
  end,
  BondingSupport = function(mapping, param, key)
    local bonding = uci_helper.get_from_uci(uci_binding_bonding_support)
    return bonding
  end,
  ModulationType = function(mapping, param, key)
    return getMode(key)
  end,
  UpstreamCurrRate = function (mapping, param, key)
    return xdslctl.infoValue("currentrate", "us", "", key)
  end,
  DownstreamCurrRate = function(mapping, param, key)
    return xdslctl.infoValue("currentrate", "ds", "", key)
  end,
  UpstreamMaxRate = function (mapping, param, key)
    return xdslctl.infoValue("maxrate", "us", "", key)
  end,
  DownstreamMaxRate = function (mapping, param, key)
    return xdslctl.infoValue("maxrate", "ds", "", key)
  end,
  ShowtimeStart = function(mapping, param, key)
    return xdslctl.stats("sincesync","time", "", key)
  end,
  UpstreamNoiseMargin = function (mapping, param, key)
    return xdslctl.infoValue("snr","us","", key)
  end,
  DownstreamNoiseMargin = function (mapping, param, key)
    return xdslctl.infoValue("snr","ds","", key)
  end,
  UpstreamAttenuation = function (mapping, param, key)
    return xdslctl.infoValue("attn","us","", key)
  end,
  DownstreamAttenuation = function (mapping, param, key)
    return xdslctl.infoValue("attn","ds","", key)
  end,
  UpstreamPower = function (mapping, param, key)
    return xdslctl.infoValue("pwr","us","", key)
  end,
  DownstreamDelay  = function (mapping, param, key)
    return xdslctl.infoValue("counters_delay", "ds", "", key)
  end,
  DownstreamPower = function (mapping, param, key)
    return xdslctl.infoValue("pwr","ds","", key)
  end,
  BytesSent = function(mapping, param, key)
    return getStats("tx_bytes")
  end,
  BytesReceived = function(mapping, param, key)
    return getStats("rx_bytes")
  end,
  BitLoading = function (mapping, param, key)
    return xdslctl.getBitLoading(key)
  end,
  UpstreamFECTotal = function (mapping, param, key)
    return xdslctl.stats("total","fec","us", key)
  end,
  DownstreamFECTotal =  function (mapping, param, key)
    return xdslctl.stats("total","fec","ds", key)
  end,
  UpstreamCRCTotal = function (mapping, param, key)
    return xdslctl.stats("total","crc","us", key)
  end,
  DownstreamCRCTotal = function (mapping, param, key)
    return xdslctl.stats("total","crc","ds", key)
  end,
  UpstreamESTotal = function (mapping, param, key)
    return xdslctl.stats("total","es","us", key)
  end,
  DownstreamESTotal  = function (mapping, param, key)
    return xdslctl.stats("total","es","ds", key)
  end,
  UpstreamSESTotal = function (mapping, param, key)
    return xdslctl.stats("total","ses","us", key)
  end,
  DownstreamSESTotal = function (mapping, param, key)
    return xdslctl.stats("total","ses","ds", key)
  end,
  UpstreamUASTotal = function (mapping, param, key)
    return xdslctl.stats("total","uas","us", key)
  end,
  DownstreamUASTotal = function (mapping, param, key)
    return xdslctl.stats("total","uas","ds", key)
  end,
  UpstreamLOSTotal = function (mapping, param, key)
    return xdslctl.stats("total","los","us", key)
  end,
  DownstreamLOSTotal = function (mapping, param, key)
    return xdslctl.stats("total","los","ds", key)
  end,
  UpstreamLOFTotal = function (mapping, param, key)
    return xdslctl.stats("total","lof","us", key)
  end,
  DownstreamLOFTotal = function (mapping, param, key)
    return xdslctl.stats("total","lof","ds", key)
  end,
  UpstreamLOMTotal = function (mapping, param, key)
    return xdslctl.stats("total","lom","us", key)
  end,
  DownstreamLOMTotal =  function (mapping, param, key)
    return xdslctl.stats("total","lom","ds", key)
  end,
  UpstreamFECCurrentQuarter = function (mapping, param, key)
    return xdslctl.stats("currentquarter","fec","us", key)
  end,
  DownstreamFECCurrentQuarter =  function (mapping, param, key)
    return xdslctl.stats("currentquarter","fec","ds", key)
  end,
  UpstreamCRCCurrentQuarter = function (mapping, param, key)
    return xdslctl.stats("currentquarter","crc","us", key)
  end,
  DownstreamCRCCurrentQuarter = function (mapping, param, key)
    return xdslctl.stats("currentquarter","crc","ds", key)
  end,
  UpstreamESCurrentQuarter = function (mapping, param, key)
    return xdslctl.stats("currentquarter","es","us", key)
  end,
  DownstreamESCurrentQuarter = function (mapping, param, key)
    return xdslctl.stats("currentquarter","es","ds", key)
  end,
  UpstreamSESCurrentQuarter = function (mapping, param, key)
    return xdslctl.stats("currentquarter","ses","us", key)
  end,
  DownstreamSESCurrentQuarter = function (mapping, param, key)
    return xdslctl.stats("currentquarter","ses","ds", key)
  end,
  UpstreamUASCurrentQuarter = function (mapping, param, key)
    return xdslctl.stats("currentquarter","uas","us", key)
  end,
  DownstreamUASCurrentQuarter = function (mapping, param, key)
    return xdslctl.stats("currentquarter","uas","ds", key)
  end,
  UpstreamLOSCurrentQuarter = function (mapping, param, key)
    return xdslctl.stats("currentquarter","los","us", key)
  end,
  DownstreamLOSCurrentQuarter = function (mapping, param, key)
    return xdslctl.stats("currentquarter","los","ds", key)
  end,
  UpstreamLOFCurrentQuarter = function (mapping, param, key)
    return xdslctl.stats("currentquarter","lof","us", key)
  end,
  DownstreamLOFCurrentQuarter = function (mapping, param, key)
    return xdslctl.stats("currentquarter","lof","ds", key)
  end,
  UpstreamLOMCurrentQuarter = function (mapping, param, key)
    return xdslctl.stats("currentquarter","lom","us", key)
  end,
  DownstreamLOMCurrentQuarter =  function (mapping, param, key)
    return xdslctl.stats("currentquarter","lom","ds", key)
  end,
  UpstreamFECPreviousQuarter = function (mapping, param, key)
    return xdslctl.stats("previousquarter","fec","us", key)
  end,
  DownstreamFECPreviousQuarter =  function (mapping, param, key)
    return xdslctl.stats("previousquarter","fec","ds", key)
  end,
  UpstreamCRCPreviousQuarter = function (mapping, param, key)
    return xdslctl.stats("previousquarter","crc","us", key)
  end,
  DownstreamCRCPreviousQuarter = function (mapping, param, key)
    return xdslctl.stats("previousquarter","crc","ds", key)
  end,
  UpstreamESPreviousQuarter = function (mapping, param, key)
    return xdslctl.stats("previousquarter","es","us", key)
  end,
  DownstreamESPreviousQuarter  = function (mapping, param, key)
    return xdslctl.stats("previousquarter","es","ds", key)
  end,
  UpstreamSESPreviousQuarter = function (mapping, param, key)
    return xdslctl.stats("previousquarter","ses","us", key)
  end,
  DownstreamSESPreviousQuarter = function (mapping, param, key)
    return xdslctl.stats("previousquarter","ses","ds", key)
  end,
  UpstreamUASPreviousQuarter = function (mapping, param, key)
    return xdslctl.stats("previousquarter","uas","us", key)
  end,
  DownstreamUASPreviousQuarter = function (mapping, param, key)
    return xdslctl.stats("previousquarter","uas","ds", key)
  end,
  UpstreamLOSPreviousQuarter = function (mapping, param, key)
    return xdslctl.stats("previousquarter","los","us", key)
  end,
  DownstreamLOSPreviousQuarter = function (mapping, param, key)
    return xdslctl.stats("previousquarter","los","ds", key)
  end,
  UpstreamLOFPreviousQuarter = function (mapping, param, key)
    return xdslctl.stats("previousquarter","lof","us", key)
  end,
  DownstreamLOFPreviousQuarter = function (mapping, param, key)
    return xdslctl.stats("previousquarter","lof","ds", key)
  end,
  UpstreamLOMPreviousQuarter = function (mapping, param, key)
    return xdslctl.stats("previousquarter","lom","us", key)
  end,
  DownstreamLOMPreviousQuarter =  function (mapping, param, key)
    return xdslctl.stats("previousquarter","lom","ds", key)
  end,
  UpstreamFECCurrentDay = function (mapping, param, key)
    return xdslctl.stats("currentday","fec","us", key)
  end,
  DownstreamFECCurrentDay =  function (mapping, param, key)
    return xdslctl.stats("currentday","fec","ds", key)
  end,
  UpstreamCRCCurrentDay = function (mapping, param, key)
    return xdslctl.stats("currentday","crc","us", key)
  end,
  DownstreamCRCCurrentDay = function (mapping, param, key)
    return xdslctl.stats("currentday","crc","ds", key)
  end,
  UpstreamESCurrentDay = function (mapping, param, key)
    return xdslctl.stats("currentday","es","us", key)
  end,
  DownstreamESCurrentDay  = function (mapping, param, key)
    return xdslctl.stats("currentday","es","ds", key)
  end,
  UpstreamSESCurrentDay = function (mapping, param, key)
    return xdslctl.stats("currentday","ses","us", key)
  end,
  DownstreamSESCurrentDay = function (mapping, param, key)
    return xdslctl.stats("currentday","ses","ds", key)
  end,
  UpstreamUASCurrentDay = function (mapping, param, key)
    return xdslctl.stats("currentday","uas","us", key)
  end,
  DownstreamUASCurrentDay = function (mapping, param, key)
    return xdslctl.stats("currentday","uas","ds", key)
  end,
  UpstreamLOSCurrentDay = function (mapping, param, key)
    return xdslctl.stats("currentday","los","us", key)
  end,
  DownstreamLOSCurrentDay = function (mapping, param, key)
    return xdslctl.stats("currentday","los","ds", key)
  end,
  UpstreamLOFCurrentDay = function (mapping, param, key)
    return xdslctl.stats("currentday","lof","us", key)
  end,
  DownstreamLOFCurrentDay = function (mapping, param, key)
    return xdslctl.stats("currentday","lof","ds", key)
  end,
  UpstreamLOMCurrentDay = function (mapping, param, key)
    return xdslctl.stats("currentday","lom","us", key)
  end,
  DownstreamLOMCurrentDay =  function (mapping, param, key)
    return xdslctl.stats("currentday","lom","ds", key)
  end,
  UpstreamFECPreviousDay = function (mapping, param, key)
    return xdslctl.stats("previousday","fec","us", key)
  end,
  DownstreamFECPreviousDay =  function (mapping, param, key)
    return xdslctl.stats("previousday","fec","ds", key)
  end,
  UpstreamCRCPreviousDay = function (mapping, param, key)
    return xdslctl.stats("previousday","crc","us", key)
  end,
  DownstreamCRCPreviousDay = function (mapping, param, key)
    return xdslctl.stats("previousday","crc","ds", key)
  end,
  UpstreamESPreviousDay = function (mapping, param, key)
    return xdslctl.stats("previousday","es","us", key)
  end,
  DownstreamESPreviousDay  = function (mapping, param, key)
    return xdslctl.stats("previousday","es","ds", key)
  end,
  UpstreamSESPreviousDay = function (mapping, param, key)
    return xdslctl.stats("previousday","ses","us", key)
  end,
  DownstreamSESPreviousDay = function (mapping, param, key)
    return xdslctl.stats("previousday","ses","ds", key)
  end,
  UpstreamUASPreviousDay = function (mapping, param, key)
    return xdslctl.stats("previousday","uas","us", key)
  end,
  DownstreamUASPreviousDay = function (mapping, param, key)
    return xdslctl.stats("previousday","uas","ds", key)
  end,
  UpstreamLOSPreviousDay = function (mapping, param, key)
    return xdslctl.stats("previousday","los","us", key)
  end,
  DownstreamLOSPreviousDay = function (mapping, param, key)
    return xdslctl.stats("previousday","los","ds", key)
  end,
  UpstreamLOFPreviousDay = function (mapping, param, key)
    return xdslctl.stats("previousday","lof","us", key)
  end,
  DownstreamLOFPreviousDay = function (mapping, param, key)
    return xdslctl.stats("previousday","lof","ds", key)
  end,
  UpstreamLOMPreviousDay = function (mapping, param, key)
    return xdslctl.stats("previousday","lom","us", key)
  end,
  DownstreamLOMPreviousDay =  function (mapping, param, key)
    return xdslctl.stats("previousday","lom","ds", key)
  end,
  UpstreamFECSinceSync = function (mapping, param, key)
    return xdslctl.stats("sincesync","fec","us", key)
  end,
  DownstreamFECSinceSync =  function (mapping, param, key)
    return xdslctl.stats("sincesync","fec","ds", key)
  end,
  UpstreamCRCSinceSync = function (mapping, param, key)
    return xdslctl.stats("sincesync","crc","us", key)
  end,
  DownstreamCRCSinceSync = function (mapping, param, key)
    return xdslctl.stats("sincesync","crc","ds", key)
  end,
  UpstreamESSinceSync = function (mapping, param, key)
    return xdslctl.stats("sincesync","es","us", key)
  end,
  DownstreamESSinceSync  = function (mapping, param, key)
    return xdslctl.stats("sincesync","es","ds", key)
  end,
  UpstreamSESSinceSync = function (mapping, param, key)
    return xdslctl.stats("sincesync","ses","us", key)
  end,
  DownstreamSESSinceSync = function (mapping, param, key)
    return xdslctl.stats("sincesync","ses","ds", key)
  end,
  UpstreamUASSinceSync = function (mapping, param, key)
    return xdslctl.stats("sincesync","uas","us", key)
  end,
  DownstreamUASSinceSync = function (mapping, param, key)
    return xdslctl.stats("sincesync","uas","ds", key)
  end,
  UpstreamLOSSinceSync = function (mapping, param, key)
    return xdslctl.stats("sincesync","los","us", key)
  end,
  DownstreamLOSSinceSync = function (mapping, param, key)
    return xdslctl.stats("sincesync","los","ds", key)
  end,
  UpstreamLOFSinceSync = function (mapping, param, key)
    return xdslctl.stats("sincesync","lof","us", key)
  end,
  DownstreamLOFSinceSync = function (mapping, param, key)
    return xdslctl.stats("sincesync","lof","ds", key)
  end,
  UpstreamLOMSinceSync = function (mapping, param, key)
    return xdslctl.stats("sincesync","lom","us", key)
  end,
  DownstreamLOMSinceSync =  function (mapping, param, key)
    return xdslctl.stats("sincesync","lom","ds", key )
  end,

}

sys_class_xdsl_.getall = function(mapping, key)
  local stats
  local values = {}
  local keys = {"status", "currentrate", "maxrate", "snr", "attn" ,"pwr", "counters_delay"}

  assert(io.open('/tmp/yuri.txt', 'a+')):write(string.format("%s %s\r\n", "getAll requested for line", key))
  values["Enable"] = uci_helper.get_from_uci(uci_binding)

  values["BondingSupport"] = uci_helper.get_from_uci(uci_binding_bonding_support)
  values["ModulationType"] = getMode(key)
  stats = xdslctl.infoValueList(keys,key)
  if stats["status"] ~= nil then
    if stats["status"] == "Showtime" then
      values["Status"] = "Up"
    elseif stats["status"] == "Idle" then
      values["Status"] = "NoSignal"
    else
      values["Status"] = "Initializing"
    end
  else
    values["Status"] = "Initializing"
  end

  if(stats["currentrate"] ~= nil) then
    values["UpstreamCurrRate"] = stats["currentrate"]["us"]
    values["DownstreamCurrRate"] = stats["currentrate"]["ds"]
    values["UpstreamMaxRate"] = stats["maxrate"]["us"]
    values["DownstreamMaxRate"] = stats["maxrate"]["ds"]
    values["UpstreamNoiseMargin"] = stats["snr"]["us"]
    values["DownstreamNoiseMargin"] = stats["snr"]["ds"]
    values["UpstreamAttenuation"] = stats["attn"]["us"]
    values["DownstreamAttenuation"] = stats["attn"]["ds"]
    values["UpstreamPower"] = stats["pwr"]["us"]
    values["DownstreamPower"] = stats["pwr"]["ds"]
    values["DownstreamDelay"] = stats["counters_delay"]["ds"]
  else
    values["UpstreamCurrRate"] = ""
    values["DownstreamCurrRate"] = ""
    values["UpstreamMaxRate"] = ""
    values["DownstreamMaxRate"] = ""
    values["UpstreamNoiseMargin"] = ""
    values["DownstreamNoiseMargin"] = ""
    values["UpstreamAttenuation"] = ""
    values["DownstreamAttenuation"] = ""
    values["UpstreamPower"] = ""
    values["DownstreamPower"] = ""
    values["DownstreamDelay"] = ""
  end
  values["BytesSent"] = getStats("tx_bytes")
  values["BytesReceived"] = getStats("rx_bytes")
  values["BitLoading"] = xdslctl.getBitLoading(key)
  stats = xdslctl.allstats(key)

  if(stats["sincesync"] ~= nil) then
    values["ShowtimeStart"] = stats["sincesync"]["time"]
    values["UpstreamFECTotal"] = stats["total"]["fec"]["us"]
    values["DownstreamFECTotal"] = stats["total"]["fec"]["ds"]
    values["UpstreamCRCTotal"] = stats["total"]["crc"]["us"]
    values["DownstreamCRCTotal"] = stats["total"]["crc"]["ds"]
    values["UpstreamESTotal"] = stats["total"]["es"]["us"]
    values["DownstreamESTotal"] = stats["total"]["es"]["ds"]
    values["UpstreamSESTotal"] = stats["total"]["ses"]["us"]
    values["DownstreamSESTotal"] = stats["total"]["ses"]["ds"]
    values["UpstreamUASTotal"] = stats["total"]["uas"]["us"]
    values["DownstreamUASTotal"] = stats["total"]["uas"]["ds"]
    values["UpstreamLOSTotal"] = stats["total"]["los"]["us"]
    values["DownstreamLOSTotal"] = stats["total"]["los"]["ds"]
    values["UpstreamLOFTotal"] = stats["total"]["lof"]["us"]
    values["DownstreamLOFTotal"] = stats["total"]["lof"]["ds"]
    values["UpstreamLOMTotal"] = stats["total"]["lom"]["us"]
    values["DownstreamLOMTotal"] = stats["total"]["lom"]["ds"]
    values["UpstreamFECCurrentQuarter"] = stats["currentquarter"]["fec"]["us"]
    values["DownstreamFECCurrentQuarter"] = stats["currentquarter"]["fec"]["ds"]
    values["DownstreamFECCurrentQuarter"] = stats["currentquarter"]["crc"]["us"]
    values["UpstreamCRCCurrentQuarter"] = stats["currentquarter"]["crc"]["us"]
    values["DownstreamCRCCurrentQuarter"] = stats["currentquarter"]["crc"]["ds"]
    values["UpstreamESCurrentQuarter"] = stats["currentquarter"]["es"]["us"]
    values["DownstreamESCurrentQuarter"] = stats["currentquarter"]["es"]["ds"]
    values["UpstreamSESCurrentQuarter"] = stats["currentquarter"]["ses"]["us"]
    values["DownstreamSESCurrentQuarter"] = stats["currentquarter"]["ses"]["ds"]
    values["UpstreamUASCurrentQuarter"] = stats["currentquarter"]["uas"]["us"]
    values["DownstreamUASCurrentQuarter"] = stats["currentquarter"]["uas"]["ds"]
    values["UpstreamLOSCurrentQuarter"] = stats["currentquarter"]["los"]["us"]
    values["DownstreamLOSCurrentQuarter"] = stats["currentquarter"]["los"]["ds"]
    values["UpstreamLOFCurrentQuarter"] = stats["currentquarter"]["lof"]["us"]
    values["DownstreamLOFCurrentQuarter"] = stats["currentquarter"]["lof"]["ds"]
    values["UpstreamLOMCurrentQuarter"] = stats["currentquarter"]["lom"]["us"]
    values["DownstreamLOMCurrentQuarter"] = stats["currentquarter"]["lom"]["ds"]
    values["UpstreamFECPreviousQuarter"] = stats["previousquarter"]["fec"]["us"]
    values["DownstreamFECPreviousQuarter"] = stats["previousquarter"]["fec"]["ds"]
    values["UpstreamCRCPreviousQuarter"] = stats["previousquarter"]["crc"]["us"]
    values["DownstreamCRCPreviousQuarter"] = stats["previousquarter"]["crc"]["ds"]
    values["UpstreamESPreviousQuarter"] = stats["previousquarter"]["es"]["us"]
    values["DownstreamESPreviousQuarter"] = stats["previousquarter"]["es"]["ds"]
    values["UpstreamSESPreviousQuarter"] = stats["previousquarter"]["ses"]["us"]
    values["DownstreamSESPreviousQuarter"] = stats["previousquarter"]["ses"]["ds"]
    values["UpstreamUASPreviousQuarter"] = stats["previousquarter"]["uas"]["us"]
    values["DownstreamUASPreviousQuarter"] = stats["previousquarter"]["uas"]["ds"]
    values["UpstreamLOSPreviousQuarter"] = stats["previousquarter"]["los"]["us"]
    values["DownstreamLOSPreviousQuarter"] = stats["previousquarter"]["los"]["ds"]
    values["UpstreamLOFPreviousQuarter"] = stats["previousquarter"]["lof"]["us"]
    values["DownstreamLOFPreviousQuarter"] = stats["previousquarter"]["lof"]["ds"]
    values["UpstreamLOMPreviousQuarter"] = stats["previousquarter"]["lom"]["us"]
    values["DownstreamLOMPreviousQuarter"] =  stats["previousquarter"]["lom"]["ds"]
    values["UpstreamFECCurrentDay"] = stats["currentday"]["fec"]["us"]
    values["DownstreamFECCurrentDay"] =  stats["currentday"]["fec"]["ds"]
    values["UpstreamCRCCurrentDay"] = stats["currentday"]["crc"]["us"]
    values["DownstreamCRCCurrentDay"] = stats["currentday"]["crc"]["ds"]
    values["UpstreamESCurrentDay"] = stats["currentday"]["es"]["us"]
    values["DownstreamESCurrentDay"] = stats["currentday"]["es"]["ds"]
    values["UpstreamSESCurrentDay"] = stats["currentday"]["ses"]["us"]
    values["DownstreamSESCurrentDay"] = stats["currentday"]["ses"]["ds"]
    values["UpstreamUASCurrentDay"] = stats["currentday"]["uas"]["us"]
    values["DownstreamUASCurrentDay"] = stats["currentday"]["uas"]["ds"]
    values["UpstreamLOSCurrentDay"] = stats["currentday"]["los"]["us"]
    values["DownstreamLOSCurrentDay"] = stats["currentday"]["los"]["ds"]
    values["UpstreamLOFCurrentDay"] = stats["currentday"]["lof"]["us"]
    values["DownstreamLOFCurrentDay"] = stats["currentday"]["lof"]["ds"]
    values["UpstreamLOMCurrentDay"] = stats["currentday"]["lom"]["us"]
    values["DownstreamLOMCurrentDay"] = stats["currentday"]["lom"]["ds"]
    values["UpstreamFECPreviousDay"] = stats["previousday"]["fec"]["us"]
    values["DownstreamFECPreviousDay"] =  stats["previousday"]["fec"]["ds"]
    values["UpstreamCRCPreviousDay"] = stats["previousday"]["crc"]["us"]
    values["DownstreamCRCPreviousDay"] = stats["previousday"]["crc"]["ds"]
    values["UpstreamESPreviousDay"] = stats["previousday"]["es"]["us"]
    values["DownstreamESPreviousDay"] = stats["previousday"]["es"]["ds"]
    values["UpstreamSESPreviousDay"] = stats["previousday"]["ses"]["us"]
    values["DownstreamSESPreviousDay"] = stats["previousday"]["ses"]["ds"]
    values["UpstreamUASPreviousDay"] = stats["previousday"]["uas"]["us"]
    values["DownstreamUASPreviousDay"] = stats["previousday"]["uas"]["ds"]
    values["UpstreamLOSPreviousDay"] = stats["previousday"]["los"]["us"]
    values["DownstreamLOSPreviousDay"] = stats["previousday"]["los"]["ds"]
    values["UpstreamLOFPreviousDay"] = stats["previousday"]["lof"]["us"]
    values["DownstreamLOFPreviousDay"] = stats["previousday"]["lof"]["ds"]
    values["UpstreamLOMPreviousDay"] = stats["previousday"]["lom"]["us"]
    values["DownstreamLOMPreviousDay"] = stats["previousday"]["lom"]["ds"]
    values["UpstreamFECSinceSync"] = stats["sincesync"]["fec"]["us"]
    values["DownstreamFECSinceSync"] =  stats["sincesync"]["fec"]["ds"]
    values["UpstreamCRCSinceSync"] = stats["sincesync"]["crc"]["us"]
    values["DownstreamCRCSinceSync"] = stats["sincesync"]["crc"]["ds"]
    values["UpstreamESSinceSync"] = stats["sincesync"]["es"]["us"]
    values["DownstreamESSinceSync"] = stats["sincesync"]["es"]["ds"]
    values["UpstreamSESSinceSync"] = stats["sincesync"]["ses"]["us"]
    values["DownstreamSESSinceSync"] = stats["sincesync"]["ses"]["ds"]
    values["UpstreamUASSinceSync"] = stats["sincesync"]["uas"]["us"]
    values["DownstreamUASSinceSync"] = stats["sincesync"]["uas"]["ds"]
    values["UpstreamLOSSinceSync"] = stats["sincesync"]["los"]["us"]
    values["DownstreamLOSSinceSync"] = stats["sincesync"]["los"]["ds"]
    values["UpstreamLOFSinceSync"] = stats["sincesync"]["lof"]["us"]
    values["DownstreamLOFSinceSync"] = stats["sincesync"]["lof"]["ds"]
    values["UpstreamLOMSinceSync"] = stats["sincesync"]["lom"]["us"]
    values["DownstreamLOMSinceSync"] = stats["sincesync"]["lom"]["ds"]
      for k,_ in pairs(values) do
        if values[k] == nil then
            values[k] = ""
        end
      end
    end
  return values
end

sys_class_xdsl_.set = {
  Enable = function(mapping, param, value)
    uci_helper.set_on_uci(uci_binding, value, mapping.commitapply)
    uci_helper.commit(uci_binding)
    return true
  end,
  VPI = function(mapping, param, value)
    uci_helper.set_on_uci(uci_binding_vpi, value, mapping.commitapply)
    uci_helper.commit(uci_binding_vpi)
    return true
  end,
  VCI = function(mapping, param, value)
    uci_helper.set_on_uci(uci_binding_vci, value, mapping.commitapply)
    uci_helper.commit(uci_binding_vci)
    return true
  end,
  BondingSupport = function(mapping, param, value)
    uci_helper.set_on_uci(uci_binding_bonding_support, value, mapping.commitapply)
    uci_helper.commit(uci_binding_bonding_support)
    return true
  end,

}

local function entriesInterfaces(mapping)
  local intfs = {}
  table.insert(intfs, "line0")
  if xdslctl.isBondingSupported() then
    table.insert(intfs, "line1")
  end
  return intfs;
end

sys_class_xdsl_.entries = entriesInterfaces
sys_class_xdsl_.commitapply = commitapply

register(sys_class_xdsl_)
