-- Automatically generated from InternetGatewayDevice:1.4
-- using generator version 2.1
local InternetGatewayDevice_TraceRouteDiagnostics_ = {
  objectType = {
    name = "InternetGatewayDevice.TraceRouteDiagnostics.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      DiagnosticsState = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "string",
        enumeration = {
          "None",
          "Requested",
          "Complete",
          "Error_CannotResolveHostName",
          "Error_MaxHopCountExceeded",
        },
      },
      Interface = {
        access = "readWrite",
        type = "string",
        max = "256",
        pathRef = true,
      },
      Host = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      NumberOfTries = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "1",
            max = "3",
          },
        },
      },
      Timeout = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "1",
          },
        },
      },
      DataBlockSize = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "1",
            max = "65535",
          },
        },
      },
      DSCP = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "63",
          },
        },
      },
      MaxHopCount = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "1",
            max = "64",
          },
        },
      },
      ResponseTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      -- RouteHopsNumberOfEntries
      -- automatically created when InternetGatewayDevice.TraceRouteDiagnostics.RouteHops.{i}. is loaded
    }
  }
}


-- Automatically generated from InternetGatewayDevice:1.4
-- using generator version 2.1
local InternetGatewayDevice_TraceRouteDiagnostics_RouteHops_i_ = {
  objectType = {
    name = "InternetGatewayDevice.TraceRouteDiagnostics.RouteHops.{i}.",
    access = "readOnly",
    numEntriesParameter = "RouteHopsNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      HopHost = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "string",
        max = "256",
      },
      HopHostAddress = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "string",
      },
      HopErrorCode = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      HopRTTimes = {
        access = "readOnly",
        activeNotify = "canDeny",
        list = true,
        max = "16",
        type = "unsignedInt",
      },
    }
  }
}

local open = io.open
local logger = require("transformer.logger")
local uci = mapper("ucihelper")
local config = "traceroute"
local section = "igd"
local match = string.match
local uci_binding = {
  DiagnosticsState = { config = config, sectionname = section, option = "state" },
  Interface = { config = config, sectionname = section, option = "interface" },
  Host = { config = config, sectionname = section, option = "host" },
  NumberOfTries = { config = config, sectionname = section, option = "tries" },
  Timeout = { config = config, sectionname = section, option = "timeout" },
  DataBlockSize = { config = config, sectionname = section, option = "size" },
  DSCP = { config = config, sectionname = section, option = "dscp" },
  MaxHopCount = { config = config, sectionname = section, option = "hopcount" },
}

local common = mapper('nwcommon')
local split_key = common.split_key
local get_ubus_interface_status = common.get_ubus_interface_status
local findLanWanInterfaces = common.findLanWanInterfaces
local get_lower_layers = common.get_lower_layers
local wanconn = require("transformer.shared.wanconnection")

local helper = mapper("traceroutehelper")
local clear_traceroute_results = helper.clear_traceroute_results
local read_traceroute_results = helper.read_traceroute_results

helper.startup(section, uci_binding)

InternetGatewayDevice_TraceRouteDiagnostics_.get = function(mapping, pname)
  local value
  if uci_binding[pname] then
    value = uci.get_from_uci(uci_binding[pname])
    if pname == "Interface" then
      local path = ""
      local lanInterfaces = findLanWanInterfaces(false)
      local isLan = false
      for _,j in pairs(lanInterfaces) do
        if (value == j) then
          isLan = true
          break
        end
      end
      if (isLan) then
        path = resolve('InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.IPInterface.{i}.', value)
      else
        local key = wanconn.get_connection_key(value)
        path = resolve('InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.', key) or resolve('InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.', key)
      end
      value = path or ""
    end

    -- Internally, we need to distinguish between Requested and InProgress; IGD does not
    if pname == "DiagnosticsState" and value == "InProgress" then
      value = "Requested"
    end
  elseif (pname == "ResponseTime") then
    local hops, time = read_traceroute_results(section)
    value = (time and tostring(time)) or "0"
  else
    return nil, "invalid parameter"
  end
  return value
end

InternetGatewayDevice_TraceRouteDiagnostics_.set = function(mapping, pname, pvalue)
  -- Interface is displayed in IGD as path, but stored as UCI/UBUS interface in UCI, so convert it first
  if pname == "Interface" then
    --allow to set empty interface by igd
    if pvalue =="" then
      helper.uci_traceroute_set(section, pname, pvalue, commitapply)
      return
    end
    -- Is it an allowed path ?
    if (not (match(pvalue, "InternetGatewayDevice%.LANDevice%.%d+%.LANHostConfigManagement%.IPInterface%.%d+") or
             match(pvalue, "InternetGatewayDevice%.WANDevice%.%d+%.WANConnectionDevice%.%d+.WANPPPConnection%.%d+") or
             match(pvalue, "InternetGatewayDevice%.WANDevice%.%d+%.WANConnectionDevice%.%d+.WANIPConnection%.%d+"))) then
      return nil, "invalid value format"
    end

    -- Convert path to key; this is always the UCI/UBUS interface name, like wan, lan, ...
    local value = tokey(pvalue)
    if (value and not match(pvalue, "InternetGatewayDevice%.LANDevice%.%d+%.LANHostConfigManagement%.IPInterface%.%d+")) then
      pvalue = split_key(value) -- Interface name is the first part of the WANDevice.WANConnectionDevice.WANIP/WANPPP key
    else
        pvalue = value
    end
    if (not pvalue) then
      return nil, "invalid value"
    end
  end
  helper.uci_traceroute_set(section, pname, pvalue, commitapply)
end


InternetGatewayDevice_TraceRouteDiagnostics_RouteHops_i_.get = function(mapping, pname, key)
  local res = read_traceroute_results(section)
  local rres = (res and res[tonumber(key)] and res[tonumber(key)][pname]) or ""
  return rres
end

InternetGatewayDevice_TraceRouteDiagnostics_RouteHops_i_.set = function(mapping, pname, key)
  return nil, "Invalid path"
end

InternetGatewayDevice_TraceRouteDiagnostics_RouteHops_i_.entries = function(mapping, parentkey)
  local result = {}

  local res = read_traceroute_results(section)
  for i,j in ipairs(res) do
    result[i]=tostring(i)
  end

  return result
end

clear_traceroute_results(section)
InternetGatewayDevice_TraceRouteDiagnostics_.commit=helper.uci_traceroute_commit
InternetGatewayDevice_TraceRouteDiagnostics_.revert=helper.uci_traceroute_revert
register(InternetGatewayDevice_TraceRouteDiagnostics_)
register(InternetGatewayDevice_TraceRouteDiagnostics_RouteHops_i_)
