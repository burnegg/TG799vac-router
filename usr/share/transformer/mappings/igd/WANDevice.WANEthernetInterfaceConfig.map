-- Automatically generated from InternetGatewayDevice:1.4
-- using generator version 2.1
local InternetGatewayDevice_WANDevice_i_WANEthernetInterfaceConfig_ = {
  objectType = {
    name = "InternetGatewayDevice.WANDevice.{i}.WANEthernetInterfaceConfig.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Enable = {
        access = "readWrite",
        type = "boolean",
      },
      Status = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Up",
          "NoLink",
          "Error",
          "Disabled",
        },
      },
      MACAddress = {
        access = "readOnly",
        type = "string",
      },
      MaxBitRate = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "10",
          "100",
          "Auto",
        },
      },
      DuplexMode = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "Half",
          "Full",
          "Auto",
        },
      },
      ShapingRate = {
        access = "readWrite",
        type = "int",
        range = {
          {
            min = "-1",
          },
        },
      },
      ShapingBurstSize = {
        access = "readWrite",
        type = "unsignedInt",
      },
    }
  }
}

local nwcommon = mapper("nwcommon")
local split_key = nwcommon.split_key
local getIntfInfo = nwcommon.getIntfInfo
local get_from_uci = mapper("ucihelper").get_from_uci
local set_on_uci = mapper("ucihelper").set_on_uci
local commit = mapper("ucihelper").commit
local revert = mapper("ucihelper").revert

local binding = { config = "ethernet", sectionname = "", option = "", default = "" }
local transactions = {}
local commitapply = commitapply
InternetGatewayDevice_WANDevice_i_WANEthernetInterfaceConfig_.get = {
  Enable = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "ETH" then
      return ""
    end
    binding.sectionname = devname
    binding.option = "enable"
    binding.default = "1"
    return get_from_uci(binding)
  end,
  Status = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "ETH" then
      return ""
    end
    local value = getIntfInfo(devname, "carrier")
    if value == "1" then
      return "Up"
    end
    if value == "0" then
      return "NoLink"
    end
    return "Disabled"
  end,
  MACAddress = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "ETH" then
      return ""
    end
    return getIntfInfo(devname, "address")
  end,
  MaxBitRate = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "ETH" then
      return ""
    end
    binding.sectionname = devname
    binding.option = "speed"
    binding.default = "Auto"
    local value = get_from_uci(binding)
    if value == "auto" then
      value = "Auto"
    end
    return value
  end,
  DuplexMode = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "ETH" then
      return ""
    end
    binding.sectionname = devname
    binding.option = "duplex"
    binding.default = ""
    local value = get_from_uci(binding)
    if value == "half" then
      value = "Half"
    else
      value = "Full"
    end
    return value
  end,
  ShapingRate = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "ETH" then
      return "-1"
    end
    binding.sectionname = devname
    binding.option = "td"
    binding.default = ""
    local trafficdesc = get_from_uci(binding)
    if trafficdesc ~= "" then
      binding.sectionname = trafficdesc
      binding.option = "mbr"
      binding.default = ""
      local value = get_from_uci(binding)
      if value ~= "" then
	value = tostring(tonumber(value) * 1000)
      else
        value="-1"
      end
      return value
    end
    return "-1"
  end,
  ShapingBurstSize = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "ETH" then
      return "-1"
    end
    binding.sectionname = devname
    binding.option = "td"
    binding.default = ""
    local trafficdesc = get_from_uci(binding)
    if trafficdesc ~= "" then
      binding.sectionname = trafficdesc
      binding.option = "mbs"
      binding.default = ""
      local value = get_from_uci(binding)
      if value == "" then
	value="-1"
      end
      return value
    end
    return "-1"
  end,
}

InternetGatewayDevice_WANDevice_i_WANEthernetInterfaceConfig_.set = {
  Enable = function(mapping, param, value, key)
    local devtype, devname = split_key(key)
    if devtype ~= "ETH" then
      return nil,"Not supported"
    end
    binding.sectionname = devname
    binding.option = "enable"
    set_on_uci(binding,value,commitapply)
    transactions[binding.config] = true
  end,
  MaxBitRate = function(mapping, param, value, key)
    local devtype, devname = split_key(key)
    if devtype ~= "ETH" then
      return nil,"Not supported"
    end
    binding.sectionname = devname
    binding.option = "speed"
    if value == "Auto" then
      value = "auto"
    end
    set_on_uci(binding,value,commitapply)
    transactions[binding.config] = true
  end, 
  DuplexMode = function(mapping, param, value, key)
   local devtype, devname = split_key(key)
    if devtype ~= "ETH" then
      return nil,"Not supported"
    end
    binding.sectionname = devname
    binding.option = "duplex"
    if value == "Half" then
      value = "half"
    else
      value = "full"
    end
    set_on_uci(binding,value,commitapply)
    transactions[binding.config] = true
  end, 
  ShapingRate = function(mapping, param, value, key)
    local devtype, devname = split_key(key)
    if devtype == "ETH" then
      binding.sectionname = devname
      binding.option = "td"
      binding.default = ""
      local trafficdesc = get_from_uci(binding)
      if trafficdesc ~= "" then
        binding.sectionname = trafficdesc
        binding.option = "mbr"
        value=tostring(tonumber(value)/ 1000)
        set_on_uci(binding,value,commitapply)
        transactions[binding.config] = true
	return true
      end
    end
    return nil,"Not supported"    
  end,
  ShapingBurstSize = function(mapping, param, value, key)
    local devtype, devname = split_key(key)
    if devtype == "ETH" then
      binding.sectionname = devname
      binding.option = "td"
      binding.default = ""
      local trafficdesc = get_from_uci(binding)
      if trafficdesc ~= "" then
        binding.sectionname = trafficdesc
        binding.option = "mbs"
        set_on_uci(binding,value,commitapply)
        transactions[binding.config] = true
        return true
      end
    end
    return nil,"Not supported"
  end,
}
InternetGatewayDevice_WANDevice_i_WANEthernetInterfaceConfig_.commit = function()
  for config,_ in pairs(transactions) do
    commit({config = config})
  end
  transactions = {}
end

InternetGatewayDevice_WANDevice_i_WANEthernetInterfaceConfig_.revert = function()
  for config,_ in pairs(transactions) do
    revert({config = config})
  end
  transactions = {}
end


register(InternetGatewayDevice_WANDevice_i_WANEthernetInterfaceConfig_)


-- Automatically generated from InternetGatewayDevice:1.3
-- using generator version 2.1
local InternetGatewayDevice_WANDevice_i_WANEthernetInterfaceConfig_Stats_ = {
  objectType = {
    name = "InternetGatewayDevice.WANDevice.{i}.WANEthernetInterfaceConfig.Stats.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      BytesSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      BytesReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      PacketsSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      PacketsReceived = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
    }
  }
}

InternetGatewayDevice_WANDevice_i_WANEthernetInterfaceConfig_Stats_.get = {
  BytesSent = function(mapping, param, key)
    local _, devname = split_key(key)
    return getIntfInfo(devname, "tx_bytes")
  end,
  BytesReceived = function(mapping, param, key)
    local _, devname = split_key(key)
    return getIntfInfo(devname, "rx_bytes")
  end,
  PacketsSent = function(mapping, param, key)
    local _, devname = split_key(key)
    return getIntfInfo(devname, "tx_packets")
  end,
  PacketsReceived = function(mapping, param, key)
    local _, devname = split_key(key)
    return getIntfInfo(devname, "rx_packets")
  end,
}

register(InternetGatewayDevice_WANDevice_i_WANEthernetInterfaceConfig_Stats_)
