-- Automatically generated from InternetGatewayDevice:1.3
-- using generator version 2.1
local InternetGatewayDevice_LANDevice_i_LANHostConfigManagement_IPInterface_i_ = {
  objectType = {
    name = "InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.IPInterface.{i}.",
    access = "readOnly",  -- readWrite currently not supported
    numEntriesParameter = "IPInterfaceNumberOfEntries",
    enableParameter = "Enable",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      Enable = {
        access = "readOnly",  -- readWrite currently not supported
        type = "boolean",
        default = "false",
      },
      IPInterfaceIPAddress = {
        access = "readOnly",  -- readWrite currently not supported
        type = "string",
        default = "",
      },
      IPInterfaceSubnetMask = {
        access = "readOnly",  -- readWrite currently not supported
        type = "string",
        default = "",
      },
      IPInterfaceAddressingType = {
        access = "readOnly",  -- readWrite currently not supported
        type = "string",
        enumeration = {
          "DHCP",
          "Static",
          "AutoIP",
        },
        default = "DHCP",
      },
    }
  }
}

local get_from_uci = mapper("ucihelper").get_from_uci

-- Standard says that support for more than one interface is optional. No reason to go beyond.
InternetGatewayDevice_LANDevice_i_LANHostConfigManagement_IPInterface_i_.entries = function(mapping, parentkey)
    return { parentkey }
end

local binding = { config = "network", sectionname = "", option = ""}
InternetGatewayDevice_LANDevice_i_LANHostConfigManagement_IPInterface_i_.get = {
  Enable = "1",
  IPInterfaceIPAddress = function(mapping, param, key)
    binding.sectionname = key
    binding.option = "ipaddr"
    return get_from_uci(binding)
  end,
  IPInterfaceSubnetMask = function(mapping, param, key)
    binding.sectionname = key
    binding.option = "netmask"
    return get_from_uci(binding)
  end,
  IPInterfaceAddressingType = "Static"
}

local function ip_intf_event(mapping, event, msg)
  -- only event if there is at least an IP address in the event
  local addresses = msg["ipv4-address"]
  if addresses and #addresses > 0 then
    return { { key = msg.interface, paramname = "IPInterfaceIPAddress" } }
  end
end

InternetGatewayDevice_LANDevice_i_LANHostConfigManagement_IPInterface_i_.add_watchers = function(mapping)
  local ubus_evsrc = eventsource("ubus")
  ubus_evsrc.watch_event(mapping, ip_intf_event, "network.interface")
end

register(InternetGatewayDevice_LANDevice_i_LANHostConfigManagement_IPInterface_i_)
