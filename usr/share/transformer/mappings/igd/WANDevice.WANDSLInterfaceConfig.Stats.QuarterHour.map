-- Automatically generated from InternetGatewayDevice:1.4
-- using generator version 2.1
local InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_QuarterHour_ = {
  objectType = {
    name = "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.QuarterHour.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      CRCErrors = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      ErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      SeverelyErroredSecs = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      FECErrors = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      ATUCFECErrors = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      ATUCCRCErrors = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
    }
  }
}

----------------------------------------------------------
-- Local definitions
----------------------------------------------------------

local xdslctl = require("transformer.shared.xdslctl")
local split_key = mapper("nwcommon").split_key

InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_QuarterHour_.get = {
  CRCErrors = function(mapping, param, key)
    local devtype = split_key(key)
    if devtype == "DSL" then
      return xdslctl.stats("currentquarter", "crc", "ds")
    end
    return ""
  end,
  ErroredSecs = function(mapping, param, key)
    local devtype = split_key(key)
    if devtype == "DSL" then
      return xdslctl.stats("currentquarter", "es", "ds")
    end
    return ""
  end,
  SeverelyErroredSecs = function(mapping, param, key)
    local devtype = split_key(key)
    if devtype == "DSL" then
      return xdslctl.stats("currentquarter", "ses", "ds")
    end
    return ""
  end,
  FECErrors = function(mapping, param, key)
    local devtype = split_key(key)
    if devtype == "DSL" then
      return xdslctl.stats("currentquarter", "fec", "ds")
    end
    return ""
  end,
  ATUCFECErrors = function(mapping, param, key)
    local devtype = split_key(key)
    if devtype == "DSL" then
      return xdslctl.stats("currentquarter", "fec", "us")
    end
    return ""
  end,
  ATUCCRCErrors = function(mapping, param, key)
    local devtype = split_key(key)
    if devtype == "DSL" then
      return xdslctl.stats("currentquarter", "crc", "us")
    end
    return ""
  end,
}

InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_QuarterHour_.getall = function(mapping, key)
  local allValues = {
    CRCErrors = "",
    ErroredSecs = "",
    SeverelyErroredSecs = "",
    FECErrors = "",
    ATUCFECErrors = "",
    ATUCCRCErrors = "",
  }
  local devtype = split_key(key)
  if devtype == "DSL" then
    local allstats = xdslctl.allstats()
    allValues.CRCErrors = allstats.currentquarter.crc.ds
    allValues.ErroredSecs = allstats.currentquarter.es.ds
    allValues.SeverelyErroredSecs = allstats.currentquarter.ses.ds
    allValues.FECErrors = allstats.currentquarter.fec.ds
    allValues.ATUCFECErrors = allstats.currentquarter.fec.us
    allValues.ATUCCRCErrors = allstats.currentquarter.crc.us
  end
  return allValues
end

register(InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_Stats_QuarterHour_)
