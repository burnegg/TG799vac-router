-- Automatically generated from InternetGatewayDevice:1.3
-- using generator version 2.1
local common = mapper("nwcommon")
local lfs = require("lfs")
--local logger = require("transformer.logger")
--local log = logger.new("tr143", 2)
local match, format, gsub = string.match, string.format, string.gsub
local get_ubus_interface_status = common.get_ubus_interface_status

local InternetGatewayDevice_UploadDiagnostics_ = {
  objectType = {
    name = "InternetGatewayDevice.UploadDiagnostics.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      DiagnosticsState = {
        access = "readWrite",
        activeNotify = "canDeny",
        type = "string",
        enumeration = {
          "None",
          "Requested",
          "Completed",
          "Error_InitConnectionFailed",
          "Error_NoResponse",
          "Error_PasswordRequestFailed",
          "Error_LoginFailed",
          "Error_NoTransferMode",
          "Error_NoPASV",
          "Error_NoCWD",
          "Error_NoSTOR",
          "Error_NoTransferComplete",
        },
      },
      Interface = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      UploadURL = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      DSCP = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "63",
          },
        },
      },
      EthernetPriority = {
        access = "readWrite",
        type = "unsignedInt",
        range = {
          {
            min = "0",
            max = "7",
          },
        },
      },
      TestFileLength = {
        access = "readWrite",
        type = "unsignedInt",
      },
      ROMTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      BOMTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      EOMTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      TotalBytesSent = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      TCPOpenRequestTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      TCPOpenResponseTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
    }
  }
}

local outfilePath = "/tmp/tr143"
local outfile = outfilePath.."/upload_test.out"
local paraList = {
    DiagnosticsState = "None",
    Interface = "",
    UploadURL = "",
    DSCP = "0",
    EthernetPriority = "0",
    TestFileLength = "0",
    ROMTime = "",
    BOMTime = "",
    EOMTime = "",
    TotalBytesSent = "0",
    TCPOpenRequestTime = "",
    TCPOpenResponseTime = "",
}

local revert_data = {}

local function stop_test()
    os.execute("killall -9 tr143_diag")
end

local function reset()
    stop_test()
    paraList["DiagnosticsState"] = "None"
    os.remove(outfile)
end


local function getTestResult (file)
    local fd = io.open(file, "r")
    if (fd ~= nil) then
        local line = fd:read("*l")
        while (line ~= nil) do
            --line format: name = value such as SourceIPAddress = 10.11.58.95
            local name, value = match (line, "^(%w+)\s*=\s*(.+)\s*$")
            if paraList[name] then
                paraList[name] = value
            end
            line = fd:read("*l")
        end
        fd:close()
    else
    end
end

local function get(mapping, pname, key, parentkey)
    getTestResult(outfile)
    return paraList[pname]
end

local function getall(mapping, key)
    getTestResult(outfile)
    return paraList
end

local function set(mapping, pname, pvalue, key)
    local pl = paraList

    if pname == "Interface" then
        -- Is it an allowed path ?
        if ((pvalue ~= "") and
            not (match(pvalue, "InternetGatewayDevice%.LANDevice%.%d+%.LANHostConfigManagement%.IPInterface%.%d+") or
            match(pvalue, "InternetGatewayDevice%.WANDevice%.%d+%.WANConnectionDevice%.%d+.WANPPPConnection%.%d+") or
            match(pvalue, "InternetGatewayDevice%.WANDevice%.%d+%.WANConnectionDevice%.%d+.WANIPConnection%.%d+"))) then
            return nil, "invalid value"
        end
        local intf = tokey(pvalue)
        if (intf and not match(pvalue, "InternetGatewayDevice%.LANDevice%.%d+%.LANHostConfigManagement%.IPInterface%.%d+")) then
            intf = common.split_key(intf)
        end
	    if (not intf) then
            return nil, "Invalid interface instance"
        end
    elseif pname == "UploadURL" then
        if not match(pvalue, "^http://") then
            return nil, "invalid value"
        end
    elseif pname == "DiagnosticsState" then
        if pvalue ~= "Requested" then
            return nil, "invalid value"
        end
    end

    revert_data[pname] = pl[pname]
    pl[pname] = pvalue
end

local function revert(mapping)
    for k,v in pairs(revert_data) do
        paraList[k] = v
    end
end

local function get_intf_by_url(url)
    local host = match(url, "http://(.-)/")
    host = gsub(host, ":.*", "") -- remove :port to get pure host or ip address
    if not match(host, "(%d+.%d+.%d+.%d+)") then
        -- if domain name, resolve to ip address
        local cmdline = host and format("nslookup %s 2>&1", host)
        local p = assert(io.popen(cmdline))
        local output = p:read("*a")
        p:close()
        host  = match(output, "Address.*:%s*(%d+.%d+.%d+.%d+).*")
    end
    -- get interface by route
    local cmdline = host and format("ip route get %s 2>&1", host)
    local p = assert(io.popen(cmdline))
    local output = p:read("*a")
    p:close()
    local intf = match(output, "dev%s+([%w_-]+)")
    return intf
end

local function commit(mapping)
    local pl = paraList
    if pl["DiagnosticsState"] == "Requested" and revert_data["DiagnosticsState"] then
        if pl["UploadURL"] == "" or pl["TestFileLength"] == "0" then
            return nil, "invalid value"
        end
        local cmd = format("/usr/bin/tr143_diag --dir up --url %s --upsize %s --resfile %s",
                            pl["UploadURL"], pl["TestFileLength"], outfile)
        local intf, dscp = "", ""

        if pl["Interface"] ~= "" then
            -- Convert path to key; this is always the UCI/UBUS interface name, like wan, lan, ...
            local interface = tokey(pl["Interface"])
            if (interface and not match(pl["Interface"], "InternetGatewayDevice%.LANDevice%.%d+%.LANHostConfigManagement%.IPInterface%.%d+")) then
                interface = common.split_key(interface)
            end

            local v = get_ubus_interface_status(interface)
            intf = (v and v['l3_device']) or ""
        else
            intf = get_intf_by_url(pl["UploadURL"])
            if not intf then
                local v = get_ubus_interface_status("wan")
                intf = (v and v['l3_device']) or ""
            end
        end

        if intf ~= "" then
            intf = format("--intf %s", intf)
        end

        if pl["DSCP"] ~= "" then
            dscp = format("--dscp %s", pl["DSCP"])
        end
        lfs.mkdir(outfilePath)
        stop_test()
        cmd = format("%s %s %s &", cmd, intf, dscp)
        os.execute(cmd)
        --log:error(format("%s", cmd))
    else
        reset()
    end
    revert_data = {}
end

InternetGatewayDevice_UploadDiagnostics_.commit = commit
InternetGatewayDevice_UploadDiagnostics_.revert = revert
InternetGatewayDevice_UploadDiagnostics_.set = set
InternetGatewayDevice_UploadDiagnostics_.get = get
InternetGatewayDevice_UploadDiagnostics_.getall = getall
register(InternetGatewayDevice_UploadDiagnostics_)

