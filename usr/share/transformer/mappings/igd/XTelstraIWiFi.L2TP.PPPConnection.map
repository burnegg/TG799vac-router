local InternetGatewayDevice_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_ = {
    objectType = {
        name = "InternetGatewayDevice.Services.X_TELSTRA_IWIFI.{i}.L2TP.PPPConnection.{i}.",
        access = "readOnly",
        minEntries = 0,
        maxEntries = math.huge,
        numEntriesParameter = "PPPConnectionNumberOfEntries",
        parameters = {
            -- Diagnostic parameters
            ConnectionStatus = {
                access = "readOnly",
                type = "string",
                max = "32",
            },
            PPPoESessionID = {
                access = "readOnly",
                type = "unsignedInt",
            },
            Name = {
                access = "readOnly",
                type = "string",
                max = "256",
            },
            Uptime = {
                access = "readOnly",
                type = "unsignedInt",
            },
            LastConnectionError = {
                access = "readOnly",
                type = "string",
                max = "64",
            },
            AutoDisconnectTime = {
                access = "readOnly",
                type = "unsignedInt",
                default = " ",
            },
            IdleDiscconnectTime = {
                access = "readOnly",
                type = "unsignedInt",
            },
            Username = {
                access = "readOnly",
                type = "string",
                max = "64",
            },
            Password = {
                access = "readOnly",
                type = "string",
                max = "64",
            },
            ExternalIPAddress = {
                access = "readOnly",
                type = "string",
                max = "45",
            },
            RemoteIPAddress = {
                access = "readOnly",
                type = "string",
                max = "45",
            },
            MACAddress = {
                access = "readOnly",
                type = "string",
                max = "17",
            },
            PPPoEACName = {
                access = "readOnly",
                type = "string",
                max = "256",
            },
            PPPoEServiceName = {
                access = "readOnly",
                type = "string",
                max = "256",
            },
            PPPLCPEcho = {
                access = "readOnly",
                type = "unsignedInt",
            },
            PPPLCPEchoRetry = {
                access = "readOnly",
                type = "unsignedInt",
            },
            -- End of Diagnostic parameters
        }
    }
}

-- Open connection to UBUS
local conn = mapper("ubus").connect()
local uci_helper = mapper("ucihelper")
local binding = {
    config = "hotspotd",
    sectionname = "main",
    option = "iface"
}

InternetGatewayDevice_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_.entries = function(mapping, parentkey)
    local entries = {}
    --The following is temprately implementation due to the PPPConection module is not implemented currently
    local iface = uci_helper.get_from_uci(binding)
    if iface ~= "" then
        local devices = conn:call("hostmanager.device", "get", {})
        if devices then
            for _, v in pairs(devices) do
                if (v["state"] == "connected" and v["technology"] == "wireless" and v["l3interface"] == iface) then
                    entries[#entries + 1] = v["mac-address"]
                end
            end
        end
    end
    return entries
end

InternetGatewayDevice_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_.getall = function(mapping, key)
    local data = {
        ConnectionStatus = "",
        PPPoESessionID = "",
        Name = "",
        Uptime = "",
        LastConnectionError = "",
        AutoDisconnectTime = "",
        IdleDiscconnectTime = "",
        Username = "",
        Password = "",
        ExternalIPAddress = "",
        RemoteIPAddress = "",
        MACAddress = "",
        PPPoEACName = "",
        PPPoEServiceName = "",
        PPPLCPEcho = "",
        PPPLCPEchoRetry = "",
    }
    return data

end

InternetGatewayDevice_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_.get = {
    ConnectionStatus = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    PPPoESessionID = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    Name = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    Uptime = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    LastConnectionError = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    AutoDisconnectTime = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    IdleDiscconnectTime = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    Username = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    Password = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    ExternalIPAddress = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    RemoteIPAddress = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    MACAddress = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    PPPoEACName = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    PPPoEServiceName = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    PPPLCPEcho = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    PPPLCPEchoRetry = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
}

register(InternetGatewayDevice_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_)

local InternetGatewayDevice_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_Stats_ = {
    objectType = {
        name = "InternetGatewayDevice.Services.X_TELSTRA_IWIFI.{i}.L2TP.PPPConnection.{i}.Stats.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            -- Diagnostic parameters
            EthernetBytesSent = {
                access = "readOnly",
                type = "unsignedInt",
            },
            EthernetBytesReceived = {
                access = "readOnly",
                type = "unsignedInt",
            },
            EthernetPacketsSent = {
                access = "readOnly",
                type = "unsignedInt",
            },
            EthernetPacketsRecieved = {
                access = "readOnly",
                type = "unsignedInt",
            },
            EthernetErrorsSent = {
                access = "readOnly",
                type = "unsignedInt",
            },
            EthernetErrorsReceived = {
                access = "readOnly",
                type = "unsignedInt",
            },
            -- End of Diagnostic parameters
        }
    }
}

InternetGatewayDevice_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_Stats_.getall = function(mapping, key)
    local data = {
        EthernetBytesSent = "",
        EthernetBytesReceived = "",
        EthernetPacketsSent = "",
        EthernetPacketsRecieved = "",
        EthernetErrorsSent = "",
        EthernetErrorsReceived = "",
    }
    return data
end

InternetGatewayDevice_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_Stats_.get = {

    EthernetBytesSent = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    EthernetBytesReceived = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    EthernetPacketsSent = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    EthernetPacketsRecieved = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    EthernetErrorsSent = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
    EthernetErrorsReceived = function(mapping, param, key)
        -- Avaliable on Sprint35
        return ""
    end,
}

register(InternetGatewayDevice_Services_X_TELSTRA_IWIFI_i_L2TP_PPPConnection_i_Stats_)
