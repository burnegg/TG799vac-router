local match, format, sub = string.match, string.format, string.sub
local tostring, tonumber = tostring, tonumber
local uci_helper = mapper("ucihelper")

local InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_NumberingPlan_ = {
    objectType = {
        name = "InternetGatewayDevice.Services.VoiceService.{i}.VoiceProfile.{i}.NumberingPlan.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            --      MinimumNumberOfDigits = {
            --        access = "readWrite",
            --        type = "unsignedInt",
            --        range = {
            --          {
            --            min = "1",
            --            max = "40",
            --          },
            --        },
            --      },
            --      MaximumNumberOfDigits = {
            --        access = "readWrite",
            --        type = "unsignedInt",
            --        range = {
            --          {
            --            min = "1",
            --            max = "40",
            --          },
            --        },
            --      },
            InterDigitTimerStd = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                        max = "50000",
                    },
                },
            },
            InterDigitTimerOpen = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                        max = "50000",
                    },
                },
            },
            --      InvalidNumberTone = {
            --        access = "readWrite",
            --        type = "unsignedInt",
            --      },
            PrefixInfoMaxEntries = {
                access = "readOnly",
                type = "unsignedInt",
            },
            --      -- PrefixInfoNumberOfEntries
            --      -- automatically created when InternetGatewayDevice.Services.VoiceService.{i}.VoiceProfile.{i}.NumberingPlan.PrefixInfo.{i}. is loaded
        }
    }
}

local dialplan_binding = { config = "mmpbx", sectionname = "dial_plan_generic" }

InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_NumberingPlan_.get = {
    InterDigitTimerStd = function(mapping, param, key)
        dialplan_binding.option = "closed_inter_digit_timer"
        return uci_helper.get_from_uci(dialplan_binding)
    end,
    InterDigitTimerOpen = function(mapping, param, key)
        dialplan_binding.option = "open_inter_digit_timer"
        return uci_helper.get_from_uci(dialplan_binding)
    end,
    PrefixInfoMaxEntries = "128"
}

InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_NumberingPlan_.set = {
    InterDigitTimerStd = function(mapping, param, value, key)
        dialplan_binding.option = "closed_inter_digit_timer"
        uci_helper.set_on_uci(dialplan_binding, value, commitapply)
    end,
    InterDigitTimerOpen = function(mapping, param, value, key)
        dialplan_binding.option = "open_inter_digit_timer"
        uci_helper.set_on_uci(dialplan_binding, value, commitapply)
    end,
}

InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_NumberingPlan_.commit = function()
    uci_helper.commit(dialplan_binding)
end

InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_NumberingPlan_.revert = function()
    uci_helper.revert(dialplan_binding)
end

register(InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_NumberingPlan_)

local InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_NumberingPlan_PrefixInfo_i_ = {
    objectType = {
        name = "InternetGatewayDevice.Services.VoiceService.{i}.VoiceProfile.{i}.NumberingPlan.PrefixInfo.{i}.",
        access = "readWrite",
        minEntries = 0,
        maxEntries = math.huge,
        numEntriesParameter = "PrefixInfoNumberOfEntries",
        parameters = {
            PrefixRange = {
                access = "readWrite",
                type = "string",
                max = "42",
                default = "",
            },
            PrefixMinNumberOfDigits = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                        max = "40",
                    },
                },
                default = "1",
            },
            PrefixMaxNumberOfDigits = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                        max = "40",
                    },
                },
                default = "1",
            },
            NumberOfDigitsToRemove = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "0",
                        max = "40",
                    },
                },
                default = "0",
            },
            PosOfDigitsToRemove = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "0",
                        max = "40",
                    },
                },
                default = "0",
            },
            DialTone = {
                access = "readWrite",
                type = "unsignedInt",
                default = "0",
            },
            FacilityAction = {
                access = "readWrite",
                type = "string",
                max = "64",
                default = "",
            },
            FacilityActionArgument = {
                access = "readWrite",
                type = "string",
                max = "256",
                default = "",
            },
            X_000E50_DefaultPort = {
                access = "readWrite",
                type = "string",
                enumeration = {
                    "FXS1",
                    "FXS2",
                    "FXO",
                    "VoIP",
                    "NA"
                },
            },
            X_000E50_FallBackPort = {
                access = "readWrite",
                type = "string",
                enumeration = {
                    "FXS1",
                    "FXS2",
                    "FXO",
                    "VoIP",
                    "NA"
                },
            },
            X_000E50_Fallback = {
                access = "readWrite",
                type = "boolean",
                default = "false",
            },
            X_000E50_Priority = {
                access = "readWrite",
                type = "string",
                enumeration = {
                    "Low",
                    "High",
                    "NA"
                },
            },
            X_000E50_Insert = {
                access = "readWrite",
                type = "string",
                max = "10",
                default = "",
            },
            X_000E50_InsertPoint = {
                access = "readWrite",
                type = "unsignedInt",
                default = "0",
            },
            X_000E50_Rescan = {
                access = "readWrite",
                type = "boolean",
                default = "false",
            },
            X_000E50_Data = {
                access = "readWrite",
                type = "boolean",
                default = "false",
            },
            X_000E50_Action = {
                access = "readWrite",
                type = "string",
                default = "",
            },
        }
    }
}

local function getTypeIdentifyFromKey (key)
    local s_type, identify = key:match("(.*)|(.*)")
    if not s_type then
        s_type, identify = "", ""
    end
    return s_type, identify
end

local content_entries = {}
local transactions = {}

local mt = { __index = function() return "" end }
local function getSection(key)
    return setmetatable(content_entries[key] or {}, mt)
end

local scc_binding = {config = "mmpbx", sectionname = "scc_entry"}
local dialplanentry_binding = {config = "mmpbx", sectionname = "dial_plan_entry"}
local profile_binding = {config = "mmpbx", sectionname = "profile"}
local ser_binding = {config="mmpbx", sectionname="service"}
local binding = { config="mmpbx" }

InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_NumberingPlan_PrefixInfo_i_.entries = function ()
    local entries, service_provisioned = {}, {}
    content_entries = {}
    local key_generated = false
    --Record services which are provisioned
    uci_helper.foreach_on_uci(ser_binding, function(section)
        if (section.provisioned == "1") then
            service_provisioned[section["type"]] = true
        end
    end)

    uci_helper.foreach_on_uci(scc_binding, function(s)
        -- scc_entry is an unnamed config entry, generate a unique key to identify if
        -- across reboot if needed.
        if (not s._key) then
            binding.sectionname = s[".name"]
            s._key = uci_helper.generate_key_on_uci(binding)
            key_generated = true
        end
        -- Only add the scc if its related service is provisioned
        if service_provisioned[s["service_type"]] then
            entries[#entries + 1] = "scc_entry|" .. s._key
            content_entries[s._key] = s
        end
    end)

    uci_helper.foreach_on_uci(dialplanentry_binding, function(s)
        -- dial_plan_entry is an unnamed config entry, generate a unique key to identify if
        -- across reboot if needed.
        if (not s._key) then
            binding.sectionname = s[".name"]
            s._key = uci_helper.generate_key_on_uci(binding)
            key_generated = true
        end
        --Only add the dialplanentry if it is enabled
        if (s["enabled"] == "1") then
            entries[#entries + 1] = "dial_plan_entry|" .. s._key
            content_entries[s._key] = s
        end
    end)

    if key_generated then
        uci_helper.commit_keys(binding)
    end

    uci_helper.foreach_on_uci(profile_binding, function(s)
        --Add all profiles except fxo profile
        if(s['.name'] ~= "fxo_profile") then
            entries[#entries + 1] = "profile|" .. s['.name']
            content_entries[s['.name']] = s
        end
    end)

    return entries
end

local function getAllPrefixInfo(mapping, key)
    local data = {
        NumberOfDigitsToRemove = "0",
        PosOfDigitsToRemove = "0",
        X_000E50_DefaultPort = "NA",
        X_000E50_FallBackPort = "NA",
        X_000E50_Fallback = "0",
        X_000E50_Priority = "NA",
        X_000E50_Insert = "",
        X_000E50_InsertPoint = "",
        X_000E50_Rescan = "0",
        X_000E50_Data = "0",
        DialTone = "",
        FacilityAction = "",
        FacilityActionArgument = "",
    }

    local s_type, identify = getTypeIdentifyFromKey(key)
    local v = getSection(identify)

    if (s_type == "scc_entry") then
        data["PrefixRange"] = v.pattern
        data["PrefixMinNumberOfDigits"] = tostring(#data["PrefixRange"])
        data["PrefixMaxNumberOfDigits"] = "30"
        local service = v.service_type
        local action = v.action
        data["X_000E50_Action"] = format ("%s_%s", action, service)
    elseif (s_type == "dial_plan_entry") then
        local pattern = v.pattern
        if(sub(pattern, 1, 1) == "^") then
            pattern = sub(pattern, 2)
        end
        data["PrefixRange"] = pattern
        data["PrefixMinNumberOfDigits"] = v.min_length
        data["PrefixMaxNumberOfDigits"] = v.max_length
        data["NumberOfDigitsToRemove"] = v.remove_number_of_characters
        data["PosOfDigitsToRemove"] = v.position_of_modify
        data["X_000E50_Priority"] = v.priority
        data["X_000E50_DefaultPort"] = "VoIP"
        data["X_000E50_Insert"] = v.insert
        data["X_000E50_InsertPoint"] = v.position_of_modify
        data["X_000E50_Data"] = v.data
        data["X_000E50_Action"] = "Activate_DialPlan"
    elseif (s_type == "profile") then
        if v.config then
            local profile_config = v.config
            local profile_binding = {config= profile_config, sectionname=identify}
            local vv = uci_helper.getall_from_uci(profile_binding)
            if(profile_config == "mmpbxrvsipnet") then
                data["PrefixRange"] = vv.uri or ""
                data["PrefixMinNumberOfDigits"] = tostring(#data["PrefixRange"])
                data["PrefixMaxNumberOfDigits"] = data["PrefixMinNumberOfDigits"]
                data["X_000E50_Priority"] = "Low"
                data["X_000E50_Action"] = "Huntgroup"
            elseif (profile_config == "mmpbxinternalnet") then
                data["PrefixRange"] = vv.number or ""
                data["PrefixMinNumberOfDigits"] = tostring(#data["PrefixRange"])
                data["PrefixMaxNumberOfDigits"] = data["PrefixMinNumberOfDigits"]
                data["X_000E50_Priority"] = "Low"
                data["X_000E50_Action"] = "Huntgroup"
            end
        end
    end
    return data
end

InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_NumberingPlan_PrefixInfo_i_.getall = getAllPrefixInfo

InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_NumberingPlan_PrefixInfo_i_.get = {
    PrefixRange = function (mapping, paramname, key)
        local s_type, identify = getTypeIdentifyFromKey(key)
        local v = getSection(identify)
        if (s_type == "scc_entry") then
            return v.pattern
        end

        if (s_type == "dial_plan_entry") then
            local pattern = v.pattern
            if(sub(pattern, 1, 1) == "^") then
                pattern = sub(pattern, 2)
            end
            return pattern
        end

        if (s_type == "profile") then
            local profile_config = v.config
            if profile_config ~= "" then
                local profile_binding = {config= profile_config, sectionname = identify}
                local v = uci_helper.getall_from_uci(profile_binding)
                if(profile_config == "mmpbxrvsipnet") then
                    return v.uri or ""
                end
                if(profile_config == "mmpbxinternalnet") then
                    return v.number or ""
                end
            end
        end
        return ""
    end,
    PrefixMinNumberOfDigits = function (mapping, paramname, key)
        local value = ""
        local s_type, identify = getTypeIdentifyFromKey(key)
        local v = getSection(identify)
        if (s_type == "dial_plan_entry") then
             return v.min_length
        end

        if (s_type == "scc_entry") then
            value = v.pattern
         return tostring(#value)
        elseif (s_type == "profile") then
            local profile_config = v.config
            if profile_config ~= "" then
                local profile_binding = {config = profile_config, sectionname = identify}
                v = uci_helper.getall_from_uci(profile_binding)
                if(profile_config == "mmpbxrvsipnet") then
                    value = (v and v.uri) or ""
                elseif(profile_config == "mmpbxinternalnet") then
                    value = (v and v.number) or ""
                end
            end
        end
        if (type(value) == "string") then
            return #value
        end
        return ""
    end,
    PrefixMaxNumberOfDigits = function (mapping, paramname, key)
        local res, value = "", ""
        local s_type, identify = getTypeIdentifyFromKey(key)
        local v = getSection(identify)
        if (s_type == "scc_entry") then
            return "30"
        end

        if (s_type == "dial_plan_entry") then
            return v.max_length
        end

        if (s_type == "profile") then
            local profile_config = v.config
            if profile_config ~= "" then
                local profile_binding = {config = profile_config, sectionname = identify}
                v = uci_helper.getall_from_uci(profile_binding)
                if(profile_config == "mmpbxrvsipnet") then
                    value = (v and v.uri) or ""
                elseif(profile_config == "mmpbxinternalnet") then
                    value = (v and v.number) or ""
                end
            end
        end
        if (type(value) == "string") then
            return #value
        end

        return ""
    end,
    NumberOfDigitsToRemove = function (mapping, paramname, key)
        local res = ""
        local s_type, identify = getTypeIdentifyFromKey(key)
        local v = getSection(identify)
        if (s_type == "dial_plan_entry") then
            res = v.remove_number_of_characters
        else
            res = "0"
        end
        return res
    end,
    PosOfDigitsToRemove = function (mapping, paramname, key)
        local res = ""
        local s_type, identify = getTypeIdentifyFromKey(key)
        local v = getSection(identify)
        if (s_type == "dial_plan_entry") then
            res = v.position_of_modify
        else
            res = "0"
        end
        return res
    end,
    X_000E50_DefaultPort = function (mapping, paramname, key)
        local s_type, res = "", ""
        s_type = getTypeIdentifyFromKey(key)
        if (s_type == "dial_plan_entry") then
            res = "VoIP"
        else
            res = "NA"
        end
        return res
    end,
    X_000E50_FallBackPort = "NA",
    X_000E50_Fallback = "0",
    X_000E50_Priority = function (mapping, paramname, key)
        local res = ""
        local s_type, identify = getTypeIdentifyFromKey(key)
        local v = getSection(identify)
        if (s_type == "scc_entry") then
            res = "NA"
        elseif(s_type == "dial_plan_entry") then
            res = v.priority
        else
            res = "Low"
        end
        return res
    end,
    X_000E50_Insert = function (mapping, paramname, key)
        local res = ""
        local s_type, identify = getTypeIdentifyFromKey(key)
        local v = getSection(identify)
        if (s_type == "dial_plan_entry") then
            res = v.insert
        end
        return res
    end,
    X_000E50_InsertPoint = function (mapping, paramname, key)
        local res = ""
        local s_type, identify = getTypeIdentifyFromKey(key)
        local v = getSection(identify)
        if (s_type == "dial_plan_entry") then
            res = v.position_of_modify
        end
        return res
    end,
    X_000E50_Rescan = "0",
    X_000E50_Data = function (mapping, paramname, key)
        local res = ""
        local s_type, identify = getTypeIdentifyFromKey(key)
        local v = getSection(identify)
        if (s_type == "dial_plan_entry") then
            res = v.data
        end
        return res
    end,
    DialTone = "",
    FacilityAction = "",
    FacilityActionArgument = "",
    X_000E50_Action = function (mapping, paramname, key)
        local res = ""
        local s_type, identify = getTypeIdentifyFromKey(key)
        local v = getSection(identify)
        if (s_type == "scc_entry") then
            local service, action = "", ""
            service = v.service_type
            action = v.action
            res = format ("%s_%s", action, service)
        elseif (s_type == "dial_plan_entry") then
            res = "Activate_DialPlan"
        else
            res = "Huntgroup"
        end
        return res
    end
}

InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_NumberingPlan_PrefixInfo_i_.set = function (mapping, paramname, paramvalue, key)
    local s_type, identify = getTypeIdentifyFromKey(key)
    local v = getSection(identify)
    binding.sectionname = v['.name']

    if( paramname == "PrefixRange") then
        local prefix_min_len, prefix_max_len = "", ""
        if (s_type == "dial_plan_entry") then
            local pattern = ""
            prefix_min_len = (v and v.min_length) or ""
            prefix_max_len = (v and v.max_length) or ""
            if(paramvalue == "\"\"" or #paramvalue > tonumber(prefix_max_len) ) then
                return nil, "should not be set"
            else
                pattern = "^"..paramvalue
                binding.option = "pattern"
                uci_helper.set_on_uci(binding, pattern, commitapply)
                transactions[binding.config] = true
            end
        else
            return nil, "should not be set"
        end
    elseif(paramname == "PrefixMinNumberOfDigits") then
        local prefix_max_len = ""
        if (s_type == "dial_plan_entry") then
            prefix_max_len = (v and v.max_length) or ""
            if(paramvalue == "\"\"" or tonumber(paramvalue)>tonumber(prefix_max_len) ) then
                return nil, "should not be set"
            else
                binding.option = "min_length"
                uci_helper.set_on_uci(binding, paramvalue, commitapply)
                transactions[binding.config] = true
            end
        else
            return nil, "should not be set"
        end
    elseif(paramname == "PrefixMaxNumberOfDigits") then
        local prefix_min_len = ""
        if (s_type == "dial_plan_entry") then
            prefix_min_len = (v and v.min_length) or ""
            if(paramvalue == "\"\"" or tonumber(paramvalue)<tonumber(prefix_min_len) ) then
                return nil, "should not be set"
            else
                binding.option = "max_length"
                uci_helper.set_on_uci(binding, paramvalue, commitapply)
                transactions[binding.config] = true
            end
        else
            return nil, "should not be set"
        end
    elseif(paramname == "NumberOfDigitsToRemove") then
        if (s_type == "dial_plan_entry") then
            binding.option = "remove_number_of_characters"
            uci_helper.set_on_uci(binding, paramvalue, commitapply)
            transactions[binding.config] = true
        else
            return nil, "should not be set"
        end
    elseif(paramname == "PosOfDigitsToRemove") then
        if (s_type == "dial_plan_entry") then
            binding.option = "position_of_modify"
            uci_helper.set_on_uci(binding, paramvalue, commitapply)
            transactions[binding.config] = true
        else
            return nil, "should not be set"
        end
    elseif(paramname == "X_000E50_DefaultPort") then
        return nil, "Not supported currently"
    elseif(paramname == "X_000E50_FallBackPort") then
        return nil, "Not supported currently"
    elseif(paramname == "X_000E50_Fallback") then
        return nil, "Not supported currently"
    elseif(paramname == "X_000E50_Priority") then
        if (s_type == "dial_plan_entry") then
            binding.option = "position_of_modify"
            uci_helper.set_on_uci(binding, paramvalue, commitapply)
            binding.option = "priority"
            uci_helper.set_on_uci(binding, paramvalue, commitapply)
            transactions[binding.config] = true
        else
            return nil, "should not be set"
        end
    elseif(paramname == "X_000E50_Insert") then
        if (s_type == "dial_plan_entry") then
            binding.option = "insert"
            uci_helper.set_on_uci(binding, paramvalue, commitapply)
            transactions[binding.config] = true
        else
            return nil, "should not be set"
        end
    elseif(paramname == "X_000E50_InsertPoint") then
        if (s_type == "dial_plan_entry") then
            binding.option = "position_of_modify"
            uci_helper.set_on_uci(binding, paramvalue, commitapply)
            transactions[binding.config] = true
        else
            return nil, "should not be set"
        end
    elseif(paramname == "X_000E50_Rescan") then
        return nil, "Not supported currently"
    elseif(paramname == "X_000E50_Data") then
        s_type = getTypeIdentifyFromKey (key)
        if (s_type == "dial_plan_entry") then
            binding.option = "data"
            uci_helper.set_on_uci(binding, paramvalue, commitapply)
            transactions[binding.config] = true
        else
            return nil, "should not be set"
        end
    elseif(paramname == "DialTone") then
        return nil, "Not supported currently"
    elseif(paramname == "FacilityAction") then
        return nil, "Not supported currently"
    elseif(paramname == "FacilityActionArgument") then
        return nil, "Not supported currently"
    elseif(paramname == "X_000E50_Action") then
        return nil, "Not supported currently"
    end
end

InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_NumberingPlan_PrefixInfo_i_.commit = function ()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uci_helper.commit(binding)
    end
    transactions = {}
end
InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_NumberingPlan_PrefixInfo_i_.revert = function ()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uci_helper.revert(binding)
    end
    transactions = {}
end
InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_NumberingPlan_PrefixInfo_i_.add = function ()
    return nil, "should not add"
end

InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_NumberingPlan_PrefixInfo_i_.delete = function ()
    return nil, "should not delete"
end

register(InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_NumberingPlan_PrefixInfo_i_)
