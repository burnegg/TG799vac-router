-- Automatically generated from InternetGatewayDevice:1.3
-- using generator version 2.1
local InternetGatewayDevice_DeviceInfo_ = {
  objectType = {
    name = "InternetGatewayDevice.DeviceInfo.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Manufacturer = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      ManufacturerOUI = {
        access = "readOnly",
        type = "string",
        max = "6",
      },
      ModelName = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      Description = {
        access = "readOnly",
        type = "string",
        max = "256",
      },
      ProductClass = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      SerialNumber = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      HardwareVersion = {
        access = "readOnly",
        forcedInform = "true",
        type = "string",
        max = "64",
      },
      SoftwareVersion = {
        access = "readOnly",
        activeNotify = "forceEnabled",
        forcedInform = "true",
        type = "string",
        max = "64",
      },
      ModemFirmwareVersion = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      EnabledOptions = {
        access = "readOnly",
        list = true,
        max = "1024",
        type = "string",
      },
      AdditionalHardwareVersion = {
        access = "readOnly",
        list = true,
        max = "64",
        type = "string",
      },
      AdditionalSoftwareVersion = {
        access = "readOnly",
        list = true,
        max = "64",
        type = "string",
      },
      SpecVersion = {
        access = "readOnly",
        status = "deprecated",
        forcedInform = "true",
        type = "string",
        max = "16",
        default = "1.0",
      },
      ProvisioningCode = {
        access = "readWrite",
        activeNotify = "forceEnabled",
        forcedInform = "true",
        type = "string",
        max = "64",
      },
      UpTime = {
        access = "readOnly",
        type = "unsignedInt",
      },
      FirstUseDate = {
        access = "readOnly",
        type = "dateTime",
      },
      DeviceLog = {
        access = "readOnly",
        type = "string",
        max = "32768",
      },
      X_000E50_DeviceLogFilter = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "SIP",
          "DHCP",
          "PPP",
          "CWMPD",
          "WANSENSING",
          "ERROR",
          "ALL",
        },
      },
      X_000E50_SoftwareVersionPassiveBank = {
        access = "readOnly",
        activeNotify = "forceEnabled",
        forcedInform = "true",
        type = "string",
        max = "64",
      },
      X_000E50_SwitchtoPassiveBank = {
        access = "readWrite",
        type = "boolean",
      },
      -- VendorConfigFileNumberOfEntries
      -- automatically created when InternetGatewayDevice.DeviceInfo.VendorConfigFile.{i}. is loaded
    }
  }
}

local floor = math.floor
local open = io.open
local tostring = tostring
local uci = mapper("ucihelper")

local function firstline(filename, nb)
  local fd, msg = open(filename)
  if not fd then
    -- you could return nil and and error message but that will abort
    -- iterating over all parameters.
    -- so here I opt to just return an empty string.
    return ""
  end
  local result = fd:read(nb or "*l")
  fd:close()
  return result
end

--[
local function friendly_name()
  local binding = { config = "env", sectionname = "var", option = "friendly_name" }
  local value = uci.get_from_uci(binding)
  if value == "" then
    value = firstline("/proc/rip/0040")
  end
  InternetGatewayDevice_DeviceInfo_.get.ModelName = value
  InternetGatewayDevice_DeviceInfo_.get.Description = value
  return value
end
--]

local provcode_binding = { config = "env", sectionname = "var", option = "provisioning_code" }
local logfilter_binding = { config = "env", sectionname = "var", option = "logfilter" }
local network_binding = {config="network",sectionname="interface"}
local sip_reqpattern = "SIP/2.0^M^M$"
local sip_statepattern = "mmpbxd%[%d+%]: SIP/2.0"
local interfaces = {}
uci.foreach_on_uci(network_binding, function(s)
  -- iterate over the network interface and take those that have proto set to DHCP
  if s['proto'] == "dhcp" then
     interfaces[#interfaces+1] = s['.name']
  end
end)
local patterns = {
  ERROR = "daemon.err",
  PPP = "pppd%[%d+%]:",
  CWMPD = "cwmpd%[%d+%]:",
  WANSENSING = "daemon.err*%[wansensing%]:",
}

local function getDhcpLog(line)
  local log
  if string.match(line, "dnsmasq%-dhcp") then
    log = line
  else
    for i=1,#interfaces do
      if string.match(line, "netifd: " .. interfaces[i]) then
        log = line
      end
    end
  end
  return log
end

InternetGatewayDevice_DeviceInfo_.get = {
  Manufacturer = function()
    local binding = { config = "env", sectionname = "var", option = "company", default = "Technicolor" }
    local override_binding = { config = "env", sectionname = "var", option = "company_name_override_igd" }
    local value = uci.get_from_uci(override_binding)
    if value == "" then
      value = uci.get_from_uci(binding)
    end
    InternetGatewayDevice_DeviceInfo_.get.Manufacturer = value
    return value
  end,
  ManufacturerOUI = function()
    local override_binding = { config = "env", sectionname = "var", option = "oui_override_igd" }
    local value = uci.get_from_uci(override_binding)
    if value == "" then
      value = firstline("/proc/rip/0032", 6)
      if value ~= "" then
        local m1 = value:sub(1, 1):byte()
        local m2 = value:sub(2, 2):byte()
        local m3 = value:sub(3, 3):byte()
        value = ("%02X%02X%02X"):format(m1, m2, m3)
      end
    end
    InternetGatewayDevice_DeviceInfo_.get.ManufacturerOUI = value
    return value
  end,
  ModelName = function()
    local binding = { config = "env", sectionname = "var", option = "prod_friendly_name" }
    local value = uci.get_from_uci(binding)
    InternetGatewayDevice_DeviceInfo_.get.ModelName = value
    return value
  end,
  Description = "Technicolor Internet Gateway Device",
  ProductClass = function()
    local binding = { config = "env", sectionname = "var", option = "prod_friendly_name" }
    local value = uci.get_from_uci(binding)
    InternetGatewayDevice_DeviceInfo_.get.ProductClass = value
    return value
  end,
  SerialNumber = function()
    local value = firstline("/proc/rip/003c") .. firstline("/proc/rip/0012")
    InternetGatewayDevice_DeviceInfo_.get.SerialNumber = value
    return value
  end,
  HardwareVersion = function()
    local value = firstline("/proc/rip/0040")
    InternetGatewayDevice_DeviceInfo_.get.HardwareVersion = value
    return value
  end,
  SoftwareVersion = function()
    local binding = { config = "version", sectionname = "@version[0]", option = "version", extended = true }
    local value = uci.get_from_uci(binding)
    value = value:match("([^%-]+)%-")
    binding = { config = "versioncusto", sectionname = "override", option = "fwversion_prefix" }
    local fwp = uci.get_from_uci(binding)
    binding = { config = "versioncusto", sectionname = "override", option = "fwversion_suffix" }
    local fws = uci.get_from_uci(binding)
    value = fwp .. value .. fws
    InternetGatewayDevice_DeviceInfo_.get.SoftwareVersion = value
    return value
  end,
  AdditionalSoftwareVersion = function()
    local binding = { config = "version", sectionname = "@version[0]", option = "config", extended = true }
    local value = uci.get_from_uci(binding)
    InternetGatewayDevice_DeviceInfo_.get.AdditionalSoftwareVersion = value
    return value
  end,
  UpTime = function()
    local fd, msg = open("/proc/uptime")
    if not fd then
      return fd, msg
    end
    local uptime = fd:read("*n")
    fd:close()
    return tostring(floor(uptime))
  end,
  -- Related to the deprecated voucher system, and can thus be ignored
  EnabledOptions = "",
  -- Vendor-specific, currently deemed unimportant and might be adapted when specifically requested
  AdditionalHardwareVersion = "",
  -- Obsolute, must be set to 1.0 by TR-098-Amdt2
  SpecVersion = "1.0",
  ProvisioningCode = function()
    local value = uci.get_from_uci(provcode_binding)
    return value
  end,
  -- Applicable only when the modem firmware is separable from the overall CPE software
  ModemFirmwareVersion = function()
    local fd, msg = io.open("/usr/bin/xdslctl")
    if msg ~= nil then
      return ""
    end
    fd:close()
      local p = assert(io.popen("xdslctl --version 2>&1"))
      local output = p:read("*a")
      p:close()
      local version = string.match(output, "AnnexA version%s*-%s*(.*)[\n]$")
      if version == nil then
        return ""
      else
        return version
      end
  end,
  FirstUseDate = function()
    local binding = { config = "cwmpd", sectionname = "cwmpd_config", option = "firstusedate" }
    local value = uci.get_from_uci(binding)
    if value == "" then
      value = "0001-01-01T00:00:00Z" --Unknown Time value
    end
    return value
  end,
  DeviceLog = function()
    local log = io.popen("/sbin/logread")
    if log == nil then
      return ""
    end
    local filter = uci.get_from_uci(logfilter_binding)
    if filter == "" then
      local logString = log:read("*a")
      if logString == nil then
        return ""
      end
      log:close()
      return string.sub(logString, -32768)
    end
    local res = {}
    for line in log:lines() do
        if filter == "SIP" and (string.match(line, sip_reqpattern) or string.match(line, sip_statepattern)) then
          res[#res+1] = string.match(line,"(.*)^M^M$")
        elseif filter == "DHCP" then
          res[#res+1] = getDhcpLog(line)
        elseif patterns[filter] and string.match(line, patterns[filter]) then
          res[#res+1] = line
        elseif filter == "ALL" then
          if string.match(line, sip_reqpattern) or string.match(line, sip_statepattern) then
            res[#res+1] = string.match(line,"(.*)^M^M$")
          elseif string.match(line, "dnsmasq%-dhcp") or string.match(line, "netifd: ") then
            res[#res+1] = getDhcpLog(line)
          else
            for i, v in pairs(patterns) do
              if i ~= "ERROR" and string.match(line, v) then
                res[#res+1] = line
              end
            end
          end
        end
    end
    log:close()
    return string.sub(table.concat(res, "\n"),-32768)
  end,
  X_000E50_DeviceLogFilter = function()
    return uci.get_from_uci(logfilter_binding)
  end,
  X_000E50_SoftwareVersionPassiveBank = function()
    local binding = { config = "version", sectionname = "@version[0]", option = "version", extended = true }
    local value = uci.get_from_uci(binding)
    if value == "" then
      return "Unknown"
    end
    value = value:match("([^%-]+)%-")
    if value == nil then
      return "Unknown"
    end
    binding = { config = "versioncusto", sectionname = "override", option = "fwversion_prefix" }
    local fwp = uci.get_from_uci(binding)
    binding = { config = "versioncusto", sectionname = "override", option = "fwversion_suffix" }
    local fws = uci.get_from_uci(binding)
    value = fwp .. value .. fws
    InternetGatewayDevice_DeviceInfo_.get.X_000E50_SoftwareVersionPassiveBank = value
    return value
  end,
  X_000E50_SwitchtoPassiveBank = "0",
}


InternetGatewayDevice_DeviceInfo_.set = function(mapping, pname, pvalue)
  if pname == "ProvisioningCode" then
    InternetGatewayDevice_DeviceInfo_.get.ProvisioningCode = pvalue
    return uci.set_on_uci(provcode_binding, pvalue, commitapply)
  end
  if pname == "X_000E50_DeviceLogFilter" then
    return uci.set_on_uci(logfilter_binding, pvalue, commitapply)
  end
  if pname == "X_000E50_SwitchtoPassiveBank" and pvalue == "1" then
    --In two phase upgrade, a tmp file will be created before manual switchover
    --This tmp file will be deleted in igd_Deviceinfo.ca
    local fd, err= open("/usr/lib/cwmpd/transfers/cwmp_waitforswitchover")
    if fd ~= nil then
      fd:close(file)
    else
      local binding = { config = "version", sectionname = "@version[0]", option = "version", extended = true }
      local value = uci.get_from_uci(binding)
      -- no passive version in passivebank, set return error
      if value == "" then
          return nil, "can not switch to passivebank"
      end
    end
    commitapply:newset("InternetGatewayDevice.DeviceInfo.X_000E50_SwitchtoPassiveBank")
  end
end

InternetGatewayDevice_DeviceInfo_.commit = function()
    uci.commit({config = "env"})
end

InternetGatewayDevice_DeviceInfo_.revert = function()
    uci.revert({config = "env"})
end

register(InternetGatewayDevice_DeviceInfo_)
