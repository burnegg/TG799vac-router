local uci_helper = mapper("ucihelper")

local InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_SIP_ = {
    objectType = {
        name = "InternetGatewayDevice.Services.VoiceService.{i}.VoiceProfile.{i}.SIP.",
        access = "readOnly",
        minEntries = 1,
        maxEntries = 1,
        parameters = {
            ProxyServer = {
                access = "readWrite",
                type = "string",
                max = "256",
                default = "",
            },
            ProxyServerPort = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "0",
                        max = "65535",
                    },
                },
                default = "5060",
            },
            ProxyServerTransport = {
                access = "readWrite",
                type = "string",
                enumeration = {
                    "TCP",
                    "UDP",
                },
                default = "UDP",
            },
            RegistrarServer = {
                access = "readWrite",
                type = "string",
                max = "256",
                default = "",
            },
            RegistrarServerPort = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "0",
                        max = "65535",
                    },
                },
                default = "5060",
            },
            RegistrarServerTransport = {
                access = "readWrite",
                type = "string",
                enumeration = {
                    "TCP",
                    "UDP",
                },
                default = "UDP",
            },
            UserAgentDomain = {
                access = "readWrite",
                type = "string",
                max = "256",
                default = "",
            },
            UserAgentPort = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "0",
                        max = "65535",
                    },
                },
                default = "0",
            },
            UserAgentTransport = {
                access = "readWrite",
                type = "string",
                enumeration = {
                    "TCP",
                    "UDP",
                },
                default = "UDP",
            },
            OutboundProxy = {
                access = "readWrite",
                type = "string",
                max = "256",
                default = "",
            },
            OutboundProxyPort = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "0",
                        max = "65535",
                    },
                },
                default = "5060",
            },
            Organization = {
                access = "readWrite",
                type = "string",
                max = "256",
                default = "",
            },
            RegistrationPeriod = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            TimerT1 = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            TimerT2 = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            TimerT4 = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            TimerA = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            TimerB = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            TimerC = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            TimerD = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            TimerE = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            TimerF = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            TimerG = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            TimerH = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            TimerI = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            TimerJ = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            TimerK = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            InviteExpires = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            ReInviteExpires = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            RegisterExpires = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            RegistersMinExpires = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            RegisterRetryInterval = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            InboundAuth = {
                access = "readWrite",
                type = "string",
                enumeration = {
                    "None",
                    "Digest",
                },
                default = "None",
            },
            InboundAuthUsername = {
                access = "readWrite",
                type = "string",
                max = "256",
                default = "",
            },
            InboundAuthPassword = {
                access = "readWrite",
                hidden = "true",
                type = "string",
                max = "256",
                default = "",
            },
            UseCodecPriorityInSDPResponse = {
                access = "readWrite",
                type = "boolean",
                default = "false",
            },
            DSCPMark = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "0",
                        max = "63",
                    },
                },
                default = "0",
            },
            --      VLANIDMark = {
            --        access = "readWrite",
            --        type = "int",
            --        range = {
            --          {
            --            min = "-1",
            --          },
            --        },
            --        default = "-1",
            --      },
            --      EthernetPriorityMark = {
            --        access = "readWrite",
            --        type = "int",
            --        range = {
            --          {
            --            min = "-1",
            --          },
            --        },
            --        default = "-1",
            --      },
            X_000E50_SecProxyServer = {
                access = "readWrite",
                type = "string",
                max = "256",
                default = "",
            },
            X_000E50_SecProxyServerPort = {
                access = "readWrite",
                type = "unsignedInt",
                range = {
                    {
                        min = "0",
                        max = "65535",
                    },
                },
                default = "5060",
            },
            -- SIPEventSubscribeNumberOfElements
            -- automatically created when InternetGatewayDevice.Services.VoiceService.{i}.VoiceProfile.{i}.SIP.EventSubscribe.{i}. is loaded
            -- SIPResponseMapNumberOfElements
            -- automatically created when InternetGatewayDevice.Services.VoiceService.{i}.VoiceProfile.{i}.SIP.ResponseMap.{i}. is loaded
        }
    }
}

local sip_binding = {config = "mmpbx", sectionname = "sip_net", option = "config"}
local sipnet_config = uci_helper.get_from_uci(sip_binding)
sip_binding.config = sipnet_config

local function revTable(inTable)
    local revTable = { }
    for k,v in pairs(inTable) do
        revTable[v]=k
    end
    return revTable
end
local dscp = {
    cs0="0",
    cs1="8",
    af11="10",
    af12="12",
    af13="14",
    cs2="16",
    af21="18",
    af22="20",
    af23="22",
    cs3="24",
    af31="26",
    af32="28",
    af33="30",
    cs4="32",
    af41="34",
    af42="36",
    af43="38",
    cs5="40",
    ef="46",
    cs6="48",
    cs7="56",
}
local rev_dscp = revTable(dscp)
local precedence = {
    ["routine"]="0",
    ["priority"]="8",
    ["immediate"]="16",
    ["flash"]="24",
    ["flash override"]="32",
    ["critic/ecp"]="40",
    ["internetwork control"]="48",
    ["network control"]="50",
}
local rev_precedence = revTable(precedence)

InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_SIP_.getall = function(mapping, key)
    sip_binding.sectionname = "sip_net"
    local v = uci_helper.getall_from_uci(sip_binding)
    local dscpmark = ""
    local QoSField = v.control_qos_field
    local QoSValue = v.control_qos_value
    if (QoSField == "dscp") then
        dscpmark = dscp[QoSValue]
    elseif (QoSField == "precedence") then
        dscpmark = precedence[QoSValue]
    end
    if (dscpmark == nil) then
        dscpmark = QoSValue
    end

    return {
        ProxyServer = v.primary_proxy or "",
        ProxyServerPort = v.primary_proxy_port or "",
        ProxyServerTransport = v.transport_type ~= "" and v.transport_type or "undefined",
        RegistrarServer = v.primary_registrar or "",
        RegistrarServerPort = v.primary_registrar_port or "",
        RegistrarServerTransport = v.transport_type ~= "" and v.transport_type or "undefined",
        UserAgentDomain = v.domain_name or "",
        UserAgentPort = v.local_port or "",
        OutboundProxy = v.primary_proxy or "",
        OutboundProxyPort = v.primary_proxy_port or "",
        Organization = "",
        RegistrationPeriod = v.reg_expire or "",
        TimerT1 = v.timer_T1 or "",
        TimerT2 = v.timer_T2 or "",
        TimerT4 = v.timer_T4 or "",
        TimerA = v.timer_T1 or "",
        TimerB = v.timer_B or "",
        TimerC = "180000",
        TimerD = v.timer_D or "",
        TimerE = v.timer_T1 or "",
        TimerF = v.timer_F or "",
        TimerG = v.timer_T1 or "",
        TimerH = v.timer_T1 and v.timer_T1 ~= "" and tostring(tonumber(v.timer_T1) *64),
        TimerI = v.timer_T4 or "" ,
        TimerJ = v.timer_J or "" ,
        TimerK = v.timer_T4 or "" ,
        InviteExpires = "1",
        ReInviteExpires = "1",
        RegisterExpires = v.reg_expire or "1",
        RegistersMinExpires = "1",
        RegisterRetryInterval = v.reg_back_off_timeout or "1",
        InboundAuth = "",
        InboundAuthUsername = "",
        InboundAuthPassword = "",
        UseCodecPriorityInSDPResponse = "1",
        DSCPMark = dscpmark,
        X_000E50_SecProxyServer = v.secondary_proxy or "",
        X_000E50_SecProxyServerPort = v.secondary_proxy_port or ""
    }
end

local uci_map = {
    ProxyServer = "primary_proxy",
    ProxyServerPort = "primary_proxy_port",
    ProxyServerTransport = "transport_type",
    RegistrarServer = "primary_registrar",
    RegistrarServerPort = "primary_registrar_port",
    RegistrarServerTransport = "transport_type",
    UserAgentDomain = "domain_name",
    UserAgentPort = "local_port",
    UserAgentTransport = "transport_type",
    OutboundProxy = "primary_proxy",
    OutboundProxyPort = "primary_proxy_port",
    RegistrationPeriod = "reg_expire",
    TimerT1 = "timer_T1",
    TimerT2 = "timer_T2",
    TimerT4 = "timer_T4",
    TimerA = "timer_T1",
    TimerB = "timer_B",
    TimerD = "timer_D",
    TimerE = "timer_T1",
    TimerF = "timer_F",
    TimerG = "timer_T1",
    --hard code T4, now only consider UDP type
    TimerI = "timer_T4",
    TimerJ = "timer_J",
    --hard code T4, now only consider UDP type
    TimerK = "timer_T4",
    RegisterExpires = "reg_expire",
    RegisterRetryInterval = "reg_back_off_timeout",
    X_000E50_SecProxyServer = "secondary_proxy",
    X_000E50_SecProxyServerPort = "secondary_proxy_port",
}

local uci_default = {
    ProxyServerTransport = "undefined",
    RegistrarServerTransport = "undefined",
}

local fixedvalue = {
    Organization = "",
    TimerC = "180000",
    InviteExpires = "1",
    ReInviteExpires = "1",
    RegistersMinExpires = "1",
    InboundAuth = "",
    InboundAuthUsername = "",
    InboundAuthPassword = "",
    UseCodecPriorityInSDPResponse = "1",
}

InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_SIP_.get = function(mapping, param, key, parentkey)
    if uci_map[param] then
        -- TODO: sectionname should be replaced with parentkey when VoiceService is mapped to network section of mmpbxrvsipnet
        sip_binding.sectionname = "sip_net"
        sip_binding.option = uci_map[param]
        sip_binding.default = uci_default[param]
        return uci_helper.get_from_uci(sip_binding)
    elseif fixedvalue[param] then
        return fixedvalue[param]
    elseif param == "TimerH" then
        sip_binding.sectionname = "sip_net"
        sip_binding.option = "timer_T1"
        sip_binding.default = nil
        local res = uci_helper.get_from_uci(sip_binding)
        if (res ~= "") then
            local timerH = 0
            timerH = tonumber(res) * 64
            return tostring(timerH)
        end
        return ""
    elseif param == "DSCPMark" then
        sip_binding.sectionname = "sip_net"
        sip_binding.option = "control_qos_field"
        sip_binding.default = nil
        local QoSField = uci_helper.get_from_uci(sip_binding)
        sip_binding.option = "control_qos_value"
        local QoSValue = uci_helper.get_from_uci(sip_binding)
        local res = ""
        if (QoSField == "dscp") then
            res = dscp[QoSValue]
        elseif (QoSField == "precedence") then
            res = precedence[QoSValue]
        end
        if (res == nil) then
            res = QoSValue
        end
        return res
    end
end

local set_map = {
    ProxyServer = true,
    ProxyServerPort = true,
    ProxyServerTransport = true,
    RegistrarServer = true,
    RegistrarServerPort = true,
    RegistrarServerTransport = true,
    UserAgentDomain = true,
    UserAgentPort = true,
    UserAgentTransport = true,
    OutboundProxy = true,
    OutboundProxyPort = true,
    RegistrationPeriod = true,
    TimerT1 = true,
    TimerT2 = true,
    TimerT4 = true,
    TimerB = true,
    TimerD = true,
    TimerF = true,
    TimerJ = true,
    RegisterExpires = true,
    RegisterRetryInterval = true,
    X_000E50_SecProxyServer = true,
    X_000E50_SecProxyServerPort = true,
}

local transactions = {}
InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_SIP_.set = function(mapping, param, value)
    if set_map[param] then
        -- TODO: sectionname should be replaced with parentkey when VoiceService is mapped to network section of mmpbxrvsipnet
        sip_binding.sectionname = "sip_net"
        sip_binding.option = uci_map[param]
        uci_helper.set_on_uci(sip_binding, value, commitapply)
        transactions[sip_binding.config] = true
    elseif param == "DSCPMark" then
        -- TODO: sectionname should be replaced with parentkey when VoiceService is mapped to network section of mmpbxrvsipnet
        sip_binding.sectionname = "sip_net"
        sip_binding.option = "control_qos_field"
        local QoSField = uci_helper.get_from_uci(sip_binding)
        local checkparamvalue = paramvalue
        if (QoSField == "dscp") then
            checkparamvalue = rev_dscp[paramvalue]
        elseif (QoSField == "precedence") then
            local precedenceorder = checkparamvalue
            if (checkparamvalue ~= "50") then
                precedenceorder = tostring (math.modf(checkparamvalue/8)*8)
            end
            checkparamvalue = rev_precedence[precedenceorder]
        end
        if (checkparamvalue ~= nil) then
            paramvalue = checkparamvalue
        end
        sip_binding.option = "control_qos_value"
        uci_helper.set_on_uci(sip_binding, paramvalue, commitapply)
        transactions[sip_binding.config] = true
    else
        return nil, "Not supported currently"
    end
end

InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_SIP_.commit = function()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uci_helper.commit(binding)
    end
    transactions = {}
end

InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_SIP_.revert = function()
    local binding = {}
    for config in pairs(transactions) do
        binding.config = config
        uci_helper.revert(binding)
    end
    transactions = {}
end

register(InternetGatewayDevice_Services_VoiceService_i_VoiceProfile_i_SIP_)
