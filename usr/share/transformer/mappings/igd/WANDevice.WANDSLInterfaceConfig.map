-- Automatically generated from InternetGatewayDevice:1.3
-- using generator version 2.1
local InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_ = {
  objectType = {
    name = "InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.",
    access = "readOnly",
    -- This has been altered!
    -- minEntries = 0,
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Enable = {
        access = "readOnly",  -- readWrite currently not supported
        type = "boolean",
      },
      Status = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Up",
          "Initializing",
          "EstablishingLink",
          "NoSignal",
          "Error",
          "Disabled",
        },
      },
      ModulationType = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "ADSL_G.dmt",
          "ADSL_G.lite",
          "ADSL_G.dmt.bis",
          "ADSL_re-adsl",
          "ADSL_2plus",
          "ADLS_four",
          "ADSL_ANSI_T1.413",
          "G.shdsl",
          "IDSL",
          "HDSL",
          "SDSL",
          "VDSL",
        },
      },
      LineEncoding = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "DMT",
          "CAP",
          "2B1Q",
          "43BT",
          "PAM",
          "QAM",
        },
      },
      DataPath = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "Interleaved",
          "Fast",
        },
      },
      InterleaveDepth = {
        access = "readOnly",
        type = "unsignedInt",
      },
      LineNumber = {
        access = "readOnly",
        type = "int",
        range = {
          {
            min = "1",
          },
        },
      },
      UpstreamCurrRate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamCurrRate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamMaxRate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      DownstreamMaxRate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      UpstreamNoiseMargin = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      DownstreamNoiseMargin = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      UpstreamAttenuation = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      DownstreamAttenuation = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      UpstreamPower = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      DownstreamPower = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "int",
      },
      ATURVendor = {
        access = "readOnly",
        type = "string",
        max = "8",
      },
      ATURCountry = {
        access = "readOnly",
        type = "string",
        max = "4",
      },
      ATURANSIStd = {
        access = "readOnly",
        type = "unsignedInt",
      },
      ATURANSIRev = {
        access = "readOnly",
        type = "unsignedInt",
      },
      ATUCVendor = {
        access = "readOnly",
        type = "string",
        max = "8",
      },
      ATUCCountry = {
        access = "readOnly",
        type = "string",
        max = "4",
      },
      ATUCANSIStd = {
        access = "readOnly",
        type = "unsignedInt",
      },
      ATUCANSIRev = {
        access = "readOnly",
        type = "unsignedInt",
      },
      TotalStart = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      ShowtimeStart = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      LastShowtimeStart = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      CurrentDayStart = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      QuarterHourStart = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
    }
  }
}

local xdslctl = require("transformer.shared.xdslctl")
local split_key = mapper("nwcommon").split_key
local match = string.match
local tostring, tonumber = tostring, tonumber

local empty_mt = { __index = function() return "" end }

-- translate Channel to DataPath
local channelmapping = setmetatable({
  ["INTR"] = "Interleaved",
  ["FAST"] = "Fast"
}, empty_mt)

-- translate mode to ModulationType
local modemapping = setmetatable({
  ["G.DMT"] = "ADSL_G.dmt",
  ["T1.413"] = "ADSL_ANSI_T1.413",
  ["G.lite"] = "ADSL_G.lite",
  ["AnnexI"] = "ADSL_G.dmt.bis",
  ["ADSL2"] = "ADSL_G.dmt.bis",
  ["ADSL2+"] = "ADSL_2plus",
  ["RE-ADSL2"] = "ADSL_re-adsl",
  ["VDSL2"] = "VDSL",
}, empty_mt)

-- Translate line pair to LineNumber
local phonelinepairmapping = setmetatable({
  ["Inner"] = "1",
  ["Outer"] = "2"
}, empty_mt)

-- function to convert the mode coming from xdslctl to ModulationType
local function convertMode(input)
  if input ~= nil then
    local mainmode = match(input, "^(%S+)")
    return modemapping[mainmode]
  end
  return ""
end


-- function to get mode from xdslctl + convert to ModulationType
local function getMode()
  return convertMode(xdslctl.infoValue("mode"))
end

-- keys to retrieve for getall (xdslctl info --show)
local xdslinfogetallkeys = {
  "status",
  "maxrate",
  "currentrate",
  "mode",
  "snr",
  "attn",
  "pwr",
  "framing_d"
}
-- keys to retrieve for getall (xdslctl info --stats)
local xdslstatsgetallkeys = {
  "total",
  "currentquarter",
  "currentday",
  "sincesync"
}

local conn = mapper("ubus").connect()

-- maps xdsl status to IGD Status
local statusmap = {
  [-1] = "NoSignal",
  [0]  = "NoSignal",
  [1]  = "Initializing",
  [2]  = "Initializing",
  [3]  = "Initializing",
  [4]  = "EstablishingLink",
  [5]  = "Up",
  [6]  = "Initializing",
  [7]  = "Initializing",
  [8]  = "EstablishingLink"
}

local function getStatus()
  local status = conn:call("xdsl", "status", {})
  if not status then
    return nil, "cannot retrieve xdsl status"
  end
  status = statusmap[status.statuscode]
  if status then
    return status
  end
  return nil, "unknown xdsl status code"
end

local function times10(val)
  local v = tonumber(val)
  if v == nil then
    return "0"
  end
  return tostring(10*v)
end


InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_.get = {
  Enable = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return "1" -- currenty cannot be stopped -> always on
  end,
  Status = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return getStatus()
  end,
  ModulationType = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return getMode()
  end,
  LineEncoding = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return "DMT" -- Also hardcoded in legacy
  end,
  DataPath = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    local mode = getMode()
    if mode == "ADSL_G.dmt" or mode == "ADSL_ANSI_T1.413" or mode == "ADSL_G.lite" then
      local channel = xdslctl.infoValue("currentrate", "channel")
      if channel ~= nil then
        return channelmapping[channel]
      end
    end
    return "None"
  end,
  InterleaveDepth = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    local mode = getMode()
    if mode == "ADSL_G.dmt" or mode == "ADSL_ANSI_T1.413" or mode == "ADSL_G.lite" then
      local channel = xdslctl.infoValue("currentrate", "channel")
      if channel == "INTR" then
        local depth = xdslctl.infoValue("framing_d", "ds")
        if depth ~= nil then
          return depth
        end
      end
    end
    return "0"
  end,
  LineNumber = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return phonelinepairmapping[xdslctl.profileValue("phonelinepair")]
  end,
  UpstreamCurrRate = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return xdslctl.infoValue("currentrate", "us", "0")
  end,
  DownstreamCurrRate = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return xdslctl.infoValue("currentrate", "ds", "0")
  end,
  UpstreamMaxRate = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return xdslctl.infoValue("maxrate", "us", "0")
  end,
  DownstreamMaxRate = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return xdslctl.infoValue("maxrate", "ds", "0")
  end,
  UpstreamNoiseMargin = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return times10(xdslctl.infoValue("snr", "us", "0"))
  end,
  DownstreamNoiseMargin = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return times10(xdslctl.infoValue("snr", "ds", "0"))
  end,
  UpstreamAttenuation = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return times10(xdslctl.infoValue("attn", "us", "0"))
  end,
  DownstreamAttenuation = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return times10(xdslctl.infoValue("attn", "ds", "0"))
  end,
  UpstreamPower = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return times10(xdslctl.infoValue("pwr", "us", "0"))
  end,
  DownstreamPower = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return times10(xdslctl.infoValue("pwr", "ds", "0"))
  end,
  ATURCountry = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return "3480" -- hardcoded as in Legacy
  end,
  ATURVendor = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return "TMMB" -- hardcoded as in Legacy
  end,
  ATURANSIStd = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    local mode = getMode()
    if mode == "ADSL_ANSI_T1.413" then
      -- return version, assume version 2 ("Issue 2")
      return "2"
    end
    return "0"
  end,
  ATURANSIRev = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    local mode = getMode()
    if mode == "ADSL_ANSI_T1.413" then
      -- return revision, assume 1998 ("T1.413-1998")
      return "1998"
    end
    return "0"
  end,
  ATUCVendor = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return "0000" -- remote end, not known
  end,
  ATUCCountry = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return "0"
  end,
  ATUCANSIStd = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return "0"
  end,
  ATUCANSIRev = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return "0"
  end,
  TotalStart = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return xdslctl.stats("total", "time")
  end,
  ShowtimeStart = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return xdslctl.stats("sincesync", "time")
  end,
  LastShowtimeStart = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return xdslctl.stats("sincesync", "time")
  end,
  CurrentDayStart = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return xdslctl.stats("currentday", "time")
  end,
  QuarterHourStart = function(mapping, param, key)
    local devtype, devname = split_key(key)
    if devtype ~= "DSL" then
      return ""
    end
    return xdslctl.stats("currentquarter", "time")
  end
}

-- preallocate
local allvalues = {
  Enable = "",
  Status = "",
  ModulationType = "",
  LineEncoding = "",
  DataPath = "",
  InterleaveDepth = "",
  LineNumber = "",
  UpstreamCurrRate = "",
  DownstreamCurrRate = "",
  UpstreamMaxRate = "",
  DownstreamMaxRate = "",
  UpstreamNoiseMargin = "",
  DownstreamNoiseMargin = "",
  UpstreamAttenuation = "",
  DownstreamAttenuation = "",
  UpstreamPower = "",
  DownstreamPower = "",
  ATURVendor = "",
  ATURCountry = "",
  ATURANSIStd = "",
  ATURANSIRev = "",
  ATUCVendor = "",
  ATUCCountry = "",
  ATUCANSIStd = "",
  ATUCANSIRev = "",
  TotalStart = "",
  ShowtimeStart = "",
  LastShowtimeStart = "",
  CurrentDayStart = "",
  QuarterHourStart = ""
}

local empty = {}

local function ubus_event_cb(mapping, event, data)
  if data.status then
    local pattern = "^" .. "DSL"
    local keys = query_keys(mapping)
    local events = {}

    for _, keyset in ipairs(keys) do
      local key = keyset[1]
      if match(key, pattern) then
        events[#events + 1] = { key = key, paramname = "Status" }
        if data.statuscode == 0 or data.statuscode == 5 then
          events[#events + 1] = { key = key, paramname = "ModulationType" }
        end
      end
    end
    return events
  end
end

InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_.add_watchers = function(mapping)
  local ubus_evsrc = eventsource("ubus")
  ubus_evsrc.watch_event(mapping, ubus_event_cb, "xdsl")
end

InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_.getall = function(mapping, key)
  local devtype, devname = split_key(key)
  if devtype ~= "DSL" then
    for k in pairs(allvalues) do
      allvalues[k] = ""
    end
    return allvalues
  end

  -- get all required values from xdslctl info --show, xdslctl info --stats
  local xdslinfovalues = xdslctl.infoValueList(xdslinfogetallkeys)
  local xdslstatsvalues = xdslctl.statsIntervalValueList(xdslstatsgetallkeys)
  local mode = convertMode(xdslinfovalues["mode"])
  local channel
  if xdslinfovalues["currentrate"] ~= nil then
    channel = xdslinfovalues["currentrate"]["channel"]
  else
    xdslinfovalues.currentrate = empty
    xdslinfovalues.maxrate = empty
    xdslinfovalues.snr = empty
    xdslinfovalues.attn = empty
    xdslinfovalues.pwr = empty
  end
  allvalues.Enable = "true"
  allvalues.Status = getStatus()
  allvalues.ModulationType = mode
  allvalues.LineEncoding = "DMT"
  allvalues.DataPath = "None"
  allvalues.InterleaveDepth="0"
  -- ADSL1 only
  if (mode == "ADSL_G.dmt" or mode == "ADSL_ANSI_T1.413" or mode == "ADSL_G.lite") and channel ~= nil then
    local datapath=channelmapping[channel]
    if datapath ~= nil then
      allvalues.DataPath = datapath
    end
    if channel == "INTR" then
      local depth = xdslinfovalues["framing_d"]["ds"]
      if depth ~= nil then
        allvalues.InterleaveDepth = depth
      end
    end
  end
  allvalues.LineNumber = phonelinepairmapping[xdslctl.profileValue("phonelinepair")]
  allvalues.UpstreamCurrRate = xdslinfovalues["currentrate"]["us"] or "0"
  allvalues.DownstreamCurrRate = xdslinfovalues["currentrate"]["ds"] or "0"
  allvalues.UpstreamMaxRate = xdslinfovalues["maxrate"]["us"] or "0"
  allvalues.DownstreamMaxRate = xdslinfovalues["maxrate"]["ds"] or "0"
  allvalues.UpstreamNoiseMargin = times10(xdslinfovalues["snr"]["us"] or "0")
  allvalues.DownstreamNoiseMargin = times10(xdslinfovalues["snr"]["ds"] or "0")
  allvalues.UpstreamAttenuation = times10(xdslinfovalues["attn"]["us"] or "0")
  allvalues.DownstreamAttenuation = times10(xdslinfovalues["attn"]["ds"] or "0")
  allvalues.UpstreamPower = times10(xdslinfovalues["pwr"]["us"] or "0")
  allvalues.DownstreamPower = times10(xdslinfovalues["pwr"]["ds"] or "0")
  allvalues.ATURVendor = "TMMB"
  allvalues.ATURCountry = "3480"
  allvalues.ATURANSIStd = "0"
  allvalues.ATURANSIRev = "0"
  if mode == "ADSL_ANSI_T1.413" then
    -- return version, assume version 2 ("Issue 2")
    allvalues.ATURANSIStd = "2"
    -- return revision, assume 1998 ("TR1.413-1998")
    allvalues.ATURANSIRev = "1998"
  end
  allvalues.ATUCVendor = "0000"
  allvalues.ATUCCountry = "0"
  allvalues.ATUCANSIStd = "0"
  allvalues.ATUCANSIRev = "0"
  allvalues.TotalStart = xdslstatsvalues["total"] or "0"
  allvalues.ShowtimeStart = xdslstatsvalues["sincesync"] or "0"
  allvalues.LastShowtimeStart = xdslstatsvalues["sincesync"] or "0"
  allvalues.CurrentDayStart = xdslstatsvalues["currentday"] or "0"
  allvalues.QuarterHourStart = xdslstatsvalues["currentquarter"] or "0"
  return allvalues
end

register(InternetGatewayDevice_WANDevice_i_WANDSLInterfaceConfig_)
