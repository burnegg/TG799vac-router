local tonumber, ipairs, setmetatable = tonumber, ipairs, setmetatable
local uci_helper = mapper("ucihelper")

local InternetGatewayDevice_Services_VoiceService_i_Capabilities_Codecs_i_ = {
    objectType = {
        name = "InternetGatewayDevice.Services.VoiceService.{i}.Capabilities.Codecs.{i}.",
        access = "readOnly",
        minEntries = 0,
        maxEntries = math.huge,
        parameters = {
            EntryID = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
                range = {
                    {
                        min = "1",
                    },
                },
            },
            Codec = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "string",
                max = "64",
                enumeration = {
                    "G.711MuLaw",
                    "G.711ALaw",
                    "G.726",
                    "G.729",
                    "G.729a",
                    "G.729e",
                    "G.728",
                    "G.723.1",
                    "G.722",
                    "G.722.1",
                    "G.722.2",
                    "GSM-FR",
                    "GSM-HR",
                    "GSM-EFR",
                    "iLBC",
                },
            },
            BitRate = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "unsignedInt",
            },
            ----      PacketizationPeriod = {
            ----        access = "readOnly",
            ----        activeNotify = "canDeny",
            ----        list = true,
            ----        type = "string",
            ----        max = "64",
            ----      },
            SilenceSuppression = {
                access = "readOnly",
                activeNotify = "canDeny",
                type = "boolean",
            },
        }
    }
}

local mt = { __index = function() return "" end }
local codecrates = setmetatable({
    PCMU = "64000",
    PCMA = "64000",
    G722 = "64000",
    ["G726-16"] = "16000",
    ["G726-24"] = "24000",
    ["G726-32"] = "32000",
    ["G726-40"] = "40000",
    G729 = "8000",
    G723 = "6300"
}, mt)

local codec_binding = {config = "mmpbx", sectionname = "codec_filter"}
local content_codecs = {}

local function getCodecSection(key)
    return setmetatable(content_codecs[key] or {}, mt)
end

InternetGatewayDevice_Services_VoiceService_i_Capabilities_Codecs_i_.entries = function ()
    local entries = {}
    local codecs = {}
    local missing_ID = {}
    local max_ID = 0
    local res = uci_helper.foreach_on_uci(codec_binding, function(s)
        if not s._key then
            s._key = uci_helper.generate_key_on_uci({ config = "mmpbx", sectionname = s[".name"] })
        end
        if not s._entryID then
            missing_ID[#missing_ID + 1] = s[".name"]
        else
            local entryID = tonumber(s._entryID)
            if entryID > max_ID then
                max_ID = entryID
            end
        end
        -- there can be multiple codec filters with the same name (internal and
        -- sip have their own set of codecs) but here we should report each
        -- codec only once
        local name = s.name
        if not codecs[name] then
            entries[#entries + 1] = s._key
            content_codecs[s._key] = s
            codecs[name] = true
        end
    end)
    if res then
        uci_helper.commit_keys(codec_binding)
    else
        uci_helper.revert_keys(codec_binding)
    end
    if #missing_ID > 0 then
        for _, name in ipairs(missing_ID) do
            max_ID = max_ID + 1
            uci_helper.set_on_uci({ config = "mmpbx", sectionname = name, option = "_entryID" }, max_ID)
        end
        uci_helper.commit(codec_binding)
    end
    return entries
end

InternetGatewayDevice_Services_VoiceService_i_Capabilities_Codecs_i_.getall = function(mapping, key)
    local v = getCodecSection(key)
    return {
        EntryID = v._entryID,
        Codec = v.name,
        BitRate = codecrates[v.name],
        SilenceSuppression = "0"
    }
end

InternetGatewayDevice_Services_VoiceService_i_Capabilities_Codecs_i_.get = {
    EntryID = function (mapping, paramname, key)
        return getCodecSection(key)._entryID
    end,
    Codec = function (mapping, paramname, key)
        return getCodecSection(key).name
    end,
    BitRate = function (mapping, paramname, key)
        return codecrates[getCodecSection(key).name]
    end,
    SilenceSuppression = "0"
}

register(InternetGatewayDevice_Services_VoiceService_i_Capabilities_Codecs_i_)
