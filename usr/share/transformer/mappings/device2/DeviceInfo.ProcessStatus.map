-- Automatically generated from Device:2.2
-- using generator version 2.1
local Device_DeviceInfo_ProcessStatus_ = {
  objectType = {
    name = "Device.DeviceInfo.ProcessStatus.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
--      CPUUsage = {
--        access = "readOnly",
--        activeNotify = "canDeny",
--        type = "unsignedInt",
--        range = {
--          {
--            max = "100",
--          },
--        },
--      },
      -- ProcessNumberOfEntries
      -- automatically created when Device.DeviceInfo.ProcessStatus.Process.{i}. is loaded
    }
  }
}

register(Device_DeviceInfo_ProcessStatus_)

-- Automatically generated from Device:2.2
-- using generator version 2.1
local Device_DeviceInfo_ProcessStatus_Process_i_ = {
  objectType = {
    name = "Device.DeviceInfo.ProcessStatus.Process.{i}.",
    access = "readOnly",
    numEntriesParameter = "ProcessNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      PID = {
        access = "readOnly",
        type = "unsignedInt",
      },
      Command = {
        access = "readOnly",
        type = "string",
        max = "256",
      },
--      Size = {
--        access = "readOnly",
--        activeNotify = "canDeny",
--        type = "unsignedInt",
--      },
--      Priority = {
--        access = "readOnly",
--        type = "unsignedInt",
--        range = {
--          {
--            max = "99",
--          },
--        },
--      },
--      CPUTime = {
--        access = "readOnly",
--        activeNotify = "canDeny",
--        type = "unsignedInt",
--      },
      State = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "string",
        enumeration = {
          "Running",
          "Sleeping",
          "Stopped",
          "Idle",
          "Uninterruptible",
          "Zombie",
        },
      },
    }
  }
}

local lfs = require("lfs")
local stat, dir = lfs.attributes, lfs.dir
local match, gsub, sub, byte = string.match, string.gsub, string.sub, string.byte

local function readFile(filename)
  local fd, msg = io.open(filename)
  if not fd then
    return fd, msg
  end
  local result = fd:read("*a")
  fd:close()
  return result
end

local function getProcessStatus(mapping, parameter, parentkey)
  local PID = parentkey

  if parameter == "PID" then
    return PID
  end

  if parameter == "Command" then
    local cmdline, msg = readFile("/proc/" .. PID .. "/cmdline")
    if not cmdline then
      return cmdline, msg
    end
    -- If we have a cmdline string we use it.
    if #cmdline > 0 then
      -- The cmdline string uses null bytes as separators; replace them by spaces.
      local cmd = gsub(cmdline, "%z", " ")
      -- Beautification: if there was a trailing null byte it was replaced by a
      -- space. In that case strip it off.
      if byte(cmd, #cmd) == 0x20 then
        cmd = sub(cmd, 1, #cmd - 1)
      end
      return cmd
    else
      -- In some circumstances the 'cmdline' file is empty: kernel threads,
      -- zombie processes, paged out processes, ... In that case read the
      -- 'stat' file.
      local procstat, msg = readFile("/proc/" .. PID .. "/stat")
      if not procstat then
        return proc, msg
      end
      local cmd = match(procstat, "%d+ %(([^%)]+)%) ")
      if cmd then
        return cmd
      end
      return ""
    end
  end

  if parameter == "State" then
    local procstat, msg = readFile("/proc/" .. PID .. "/stat")
    if not procstat then
      return proc, msg
    end
    local state = match(procstat, "%d+ %([^%)]+%) ([RSDZTW])")
    if not state then
      return state
    end
    local stateMap = { R = 'Running', S = 'Sleeping', D = 'Uninterruptible', 
      Z = 'Zombie', T = 'Stopped', W = 'Running' }
    return stateMap[state]
  end
end

local function entriesProcessStatus(mapping)
  local result = {}
  for file in dir('/proc/') do
    -- we're only interested in PIDs
    if tonumber(file) then
      result[#result+1] = file  -- the PID is our key
    end
  end
  return result
end


Device_DeviceInfo_ProcessStatus_Process_i_.get=getProcessStatus
Device_DeviceInfo_ProcessStatus_Process_i_.entries=entriesProcessStatus

register(Device_DeviceInfo_ProcessStatus_Process_i_)
