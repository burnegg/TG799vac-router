-- Automatically generated from Device:2.2
-- using generator version 2.1
local Device_DeviceInfo_ = {
  objectType = {
    name = "Device.DeviceInfo.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      Manufacturer = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      ManufacturerOUI = {
        access = "readOnly",
        type = "string",
        min = "6",
        max = "6",
      },
      ModelName = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "string",
        max = "64",
      },
      Description = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "string",
        max = "256",
      },
      ProductClass = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      SerialNumber = {
        access = "readOnly",
        type = "string",
        max = "64",
      },
      HardwareVersion = {
        access = "readOnly",
        forcedInform = "true",
        type = "string",
        max = "64",
      },
      SoftwareVersion = {
        access = "readOnly",
        activeNotify = "forceEnabled",
        forcedInform = "true",
        type = "string",
        max = "64",
      },
      AdditionalHardwareVersion = {
        access = "readOnly",
        list = true,
        max = "64",
        type = "string",
      },
      AdditionalSoftwareVersion = {
        access = "readOnly",
        list = true,
        max = "64",
        type = "string",
      },
      ProvisioningCode = {
        access = "readWrite",
        activeNotify = "forceEnabled",
        forcedInform = "true",
        type = "string",
        max = "64",
      },
      UpTime = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "unsignedInt",
      },
      FirstUseDate = {
        access = "readOnly",
        activeNotify = "canDeny",
        type = "dateTime",
      },
      -- VendorConfigFileNumberOfEntries
      -- automatically created when Device.DeviceInfo.VendorConfigFile.{i}. is loaded
      -- SupportedDataModelNumberOfEntries
      -- automatically created when Device.DeviceInfo.SupportedDataModel.{i}. is loaded
      -- ProcessorNumberOfEntries
      -- automatically created when Device.DeviceInfo.Processor.{i}. is loaded
      -- VendorLogFileNumberOfEntries
      -- automatically created when Device.DeviceInfo.VendorLogFile.{i}. is loaded
    }
  }
}

local floor = math.floor
local open = io.open
local tostring = tostring
local uci = mapper("ucihelper")

local function firstline(filename, nb)
  local fd, msg = open(filename)
  if not fd then
    -- you could return nil and and error message but that will abort
    -- iterating over all parameters.
    -- so here I opt to just return an empty string.
    return ""
  end
  local result = fd:read(nb or "*l")
  fd:close()
  return result
end

local function friendly_name()
  local binding = { config = "env", sectionname = "var", option = "friendly_name" }
  local value = uci.get_from_uci(binding)
  if value == "" then
    value = firstline("/proc/rip/0040")
  end
  Device_DeviceInfo_.get.ModelName = value
  Device_DeviceInfo_.get.Description = value
  return value
end

local provcode_binding = { config = "env", sectionname = "var", option = "provisioning_code" }

Device_DeviceInfo_.get = {
  Manufacturer = function()
    local binding = { config = "env", sectionname = "var", option = "company" }
    local value = uci.get_from_uci(binding)
    if value == "" then
      value = "Technicolor"
    end
    Device_DeviceInfo_.get.Manufacturer = value
    return value
  end,
  ManufacturerOUI =  function()
    local value = firstline("/proc/rip/0032", 6)
    if value ~= "" then
      local m1 = value:sub(1, 1):byte()
      local m2 = value:sub(2, 2):byte()
      local m3 = value:sub(3, 3):byte()
      value = ("%02X%02X%02X"):format(m1, m2, m3)
    end
    Device_DeviceInfo_.get.ManufacturerOUI = value
    return value
  end,
  ModelName = friendly_name,
  Description = friendly_name,
  ProductClass =  function()
    local binding = { config = "env", sectionname = "var", option = "prod_number" }
    local value = uci.get_from_uci(binding)
    Device_DeviceInfo_.get.ModelName = value
    return value
  end,
  SerialNumber = function()
    local value = firstline("/proc/rip/003c") .. firstline("/proc/rip/0012")
    Device_DeviceInfo_.get.SerialNumber = value
    return value
  end,
  HardwareVersion = function()
    local value = firstline("/proc/rip/0040")
    Device_DeviceInfo_.get.HardwareVersion = value
    return value
  end,
  SoftwareVersion = function()
    local binding = { config = "version", sectionname = "@version[0]", option = "version", extended = true }
    local value = uci.get_from_uci(binding)
    value = value:match("([^%-]+)%-")
    Device_DeviceInfo_.get.SoftwareVersion = value
    return value
  end,
  AdditionalSoftwareVersion = function()
    local binding = { config = "version", sectionname = "@version[0]", option = "config", extended = true }
    local value = uci.get_from_uci(binding)
    Device_DeviceInfo_.get.AdditionalSoftwareVersion = value
    return value
  end,
  AdditionalHardwareVersion = "",
  ProvisioningCode = function()
    return uci.get_from_uci(provcode_binding)
  end,
  UpTime = function()
    local fd, msg = open("/proc/uptime")
    if not fd then
      return fd, msg
    end
    local uptime = fd:read("*n")
    fd:close()
    return tostring(floor(uptime))
  end,
  FirstUseDate = "0001-01-01T00:00:00Z", -- Unknown Time value for now
}
Device_DeviceInfo_.set = function(mapping, pname, pvalue)
  if pname == "ProvisioningCode" then
    return uci.set_on_uci(provcode_binding, pvalue, commitapply)
  end
end

register(Device_DeviceInfo_)
