#!/usr/bin/env lua
-- This script is a bridge between ubus and Transformer. Due to multithreading
-- issues in uloop we can't have the cwmpd Transformer backend listen directly
-- on ubus. Instead this script runs standalone and on certain ubus events it
-- does a set on a dummy mapping in Transformer. The backend is subscribed on
-- this change and will then forward this event to cwmpd core.

local uloop = require("uloop")
uloop.init()  -- needs to be done before ubus.connect() or it doesn't work...

local dm = require("datamodel")
local cursor = require("uci").cursor()
local logger = require("transformer.logger").new("cwmpd", 3)

local _cwmp_intf
local function get_cwmp_interface()
  if not _cwmp_intf then
    _cwmp_intf = cursor:get("cwmpd", "cwmpd_config", "interface")
    cursor:unload("cwmpd")
    cursor:close()
    cursor = nil
  else
    logger:error("Could not get an interface for CWMPd")
  end
  return _cwmp_intf
end

local function diag_complete_cb()
  dm.set("uci.cwmpd.events.DiagnosticsComplete", "1")
end

local function ip_change_cb(msg)
  local interface = get_cwmp_interface()
  if not interface or (msg.interface ~= interface) then
    -- not interested, different interface or interface not known yet
    return
  end
  if msg["ipv4-address"] and #msg["ipv4-address"] > 0 then
    -- only do something when there's an IP address in the event
    dm.set("uci.cwmpd.events.ExternalIP", "1")
  end
end

-- subscribe on ubus for events
local conn = require("ubus").connect()
conn:listen({
  ["nslookupdiag.nslookupdiag_igd"] = diag_complete_cb,
  ["ipping.ipping_igd"] = diag_complete_cb,
  ["traceroute.traceroute_igd"] = diag_complete_cb,
  ["upload.upload_dm"] = diag_complete_cb,
  ["download.download_dm"] = diag_complete_cb,
  ["network.interface"] = ip_change_cb,
})

uloop.run()
