#!/bin/sh

# Reset to factory default:
#
# Erase the configuration of the active SW bank and reboot.

usage() {
	echo "Reset to factory default: Erase active configuration"
	echo "$(basename $0) [--all]"
	echo "Option:"
	echo "   --all : Remove all configurations (by erasing user partition)"
}

get_alive_processes(){
	if [[ $1 != "PID" && $1 != "NAME" ]]; then echo; exit; fi
	alive_processes=""
	for i in $(find /proc/[0-9]* -name exe -maxdepth 1); do
		name=$(readlink $i);
		if [[ ! -z $name ]]; then
			basename_process=$(basename $name)
			case $basename_process in
				busybox|rtfd|dropbear|boot)
					# exclude some processes that might hang while killing
					;;
				*)
					if [[ $1 == "NAME" ]]; then
						alive_processes="$(basename $name) $alive_processes";
					fi
					if [[ $1 == "PID" ]]; then
						alive_processes="$(echo $i | sed 's|/proc/\([0-9]*\)/exe|\1|') $alive_processes";
					fi
					;;
			esac
		fi
	done
	echo $alive_processes
}

kill_running_processes() {
	# First stop watchdog to prevent a reboot while killing processes
	[ -f /etc/init.d/watchdog-tch ] && /etc/init.d/watchdog-tch stop
	# Gently remove the processes according to their start order
	for i in $(ls /etc/rc.d/S* | sort -r); do 
		case $(basename $(readlink $i)) in
			boot|network|dropbear) # don't stop these processes
				echo "Don't stop $i"
				;;
			mm*|transformer) # Some processes need a bit of time to stop
				echo "Stopping $i ..."
				$i stop
				sleep 1
				;;
			*)
				echo "Stopping $i ..."
				$i stop
				;;
		esac
	done
	echo "Processes stopped !"
	# Be a bit less gently to processes that would still be out there
	alive_processes_name=$(get_alive_processes NAME)
	for i in $alive_processes_name; do
		echo "killing $i..."
		killall $i
		sleep 1
	done
	# Now it is really time to shut down remaining processes...
	alive_processes_pid=$(get_alive_processes PID)
	if [[ -n "$alive_processes_pid" ]]; then
		echo "Still some processes alive, hard kill them ($alive_processes_pid)"
		kill -9 $alive_processes_pid
	fi
}

case $# in
	0)
		# Create a link to point to the configuration to be erased (done at next boot, before mounting the overlay)
		ln -s $(mount | awk '/overlayfs/{print substr($1,length("overlayfs:")+1)}')	/overlay/remove_due_to_rtfd
		reboot
		;;

	1)
		if [[ $1 == "--help" ]]; then
			usage
			exit 0
		fi
		if [[ $1 == "--all" ]]; then
			OVERLAY_TYPE=""
			if ( mount | grep '/dev/mtdblock[0-9] on /overlay type jffs2' >/dev/null ) ; then
				OVERLAY_TYPE="jffs2"
			elif ( mount | grep 'ubi0:user on /overlay type ubifs' >/dev/null ) ; then
				OVERLAY_TYPE="ubifs"
			else
				echo "Error: Unknown overlay type"
				echo
				exit 1
			fi

			# kill processes to make sure no process is writting in the overlay
			kill_running_processes

			if [ "$OVERLAY_TYPE" = "jffs2" ] ; then
				echo "unmounting overlay..."
				# Unmount the overlay seems to be not working, instead set it as read only
				mount -type overlayfs -o ro,remount /
				# unmount the overlay lower filesystem
				umount /overlay

				# clean up partition and reboot
				device_nr=$(grep -E "(rootfs_data|userfs)" /proc/mtd | sed 's/mtd\([0-9]\):.*\(rootfs_data\|userfs\).*/\1/')
				mtd -r erase mtd${device_nr}
			else
				rm -rf /overlay/* && sync && reboot
			fi
		elif [[ $1 == "--soft" ]]; then
			ln -s $(mount | awk '/overlayfs/{print substr($1,length("overlayfs:")+1)}')	/overlay/remove_due_to_rtfd
			# Copy files to be preserved into /overlay/rtfd_persistent_files
			if [[ -d /etc/soft_rtfd -a -f /etc/soft_rtfd/persistent_filelist ]]; then
				cp /etc/soft_rtfd/persistent_filelist /overlay/persistent_filelist
				mkdir -p /overlay/rtfd_persistent_files
				for i in `cat /etc/soft_rtfd/persistent_filelist | egrep -v \#`
				do
					if [[ -f $i ]]; then
						cp $i /overlay/rtfd_persistent_files/
					fi
				done
			fi
			reboot
		else
			echo "Error: Invalid arguments"
			echo
			usage
			exit 1
		fi
		;;

	*)
		echo "Error: Invalid arguments"
		echo
		usage
		exit 1
		;;
esac

