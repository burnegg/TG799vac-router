user nobody nogroup;
# DO NOT EVER change the number of worker processes!
worker_processes  1;

events {
    worker_connections  256;
}

http {
    error_log   /var/log/nginx/error.log crit;
    access_log  off;

    include       mime.types;

    lua_package_path ';;${prefix}lib/lua/?.lua;/www/lua/?.lua';
    lua_package_cpath '${prefix}lib/lua/?.so';

    keepalive_timeout  65;
    add_header X-Frame-Options SAMEORIGIN;
    add_header Content-Security-Policy "default-src 'self';script-src 'self' 'unsafe-eval' 'unsafe-inline';style-src 'self' 'unsafe-inline'";

    init_by_lua '
        local sessioncontrol = require("web.sessioncontrol")
        sessioncontrol.setManagerForPort("default", "80")
        sessioncontrol.setManagerForPort("assistance", "443")
        sessioncontrol.setManagerForPort("sipdevice", "8443")

        require("web.assistance").setup()
    ';

    server {
        listen       80;
        listen       443 ssl;
        listen       8443;
        ssl_certificate /etc/nginx/server.crt;
        ssl_certificate_key /etc/nginx/server.key;

        server_name  localhost;
        root /www/docroot;
        client_body_buffer_size 64k;

        # platform/custo specific values
        include ui_server.conf;

        location = / {
            index home.lp;
        }

        location ^~ /css/ {
          #do nothing
        }

        location ^~ /img/ {
          #do nothing
        }

        location ^~ /font/ {
          #do nothing
        }

        location ^~ /js/ {
          #do nothing
        }

        location ^~ /help/ {
          #do nothing
        }

        location ^~ / {
            access_by_lua '
              require("web.assistance").enable()
              local mgr = require("web.sessioncontrol").getmgr()
              mgr:checkrequest()
              mgr:handleAuth()
            ';
            content_by_lua '
              require("cards").setpath("/www/cards")
              require("web.lp").setpath("/www/cards/")
              require("web.web").process()
            ';
        }

        # additional/custom configuration
        include main_*.conf;
    }
    server {
        listen       127.0.0.1:55555;
        server_name  127.0.0.1;
        root         /www;

        location = /ra {
            access_by_lua '
              require("web.assistance").enable()
            ';

            content_by_lua '
              local assistance = require("web.assistance")
              local getargs = ngx.req.get_uri_args()
              for k, v in pairs(getargs) do
                 local assistant = assistance.getAssistant(k)
                 local enable, mode, pwdcfg, pwd = string.match(string.untaint(v), "(.*)_(.*)_(.*)_(.*)")
                 if pwdcfg == "random" then
                    pwd=nil
                 elseif pwdcfg == "keep" then
                    pwd=false
                 end
                 if enable == "on" then
                   assistant:enable(true, mode=="permanent", pwd)
                 elseif enable == "off" then
                   assistant:enable(false, mode=="permanent", pwd)
                 end
              end
          ';
        }

        location = /reloadWebUsers {
            content_by_lua '
              require("web.sessioncontrol").reloadUsers()
            ';
        }
    }

    server {
        # ipv4
        listen 8080 tproxy;
        # ipv6
        listen [::]:8080 tproxy;

        #access_log /var/log/nginx/intercept.log;

        access_by_lua '
          return ngx.redirect("http://mygateway.gateway")
        ';
    }
}
